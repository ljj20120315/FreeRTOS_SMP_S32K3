Dump after hash based groups
Congruence classes: 4 with total: 5 items (in a non-singular class: 2)
Class size histogram [number of members]: number of classes
     1:      3
     2:      1
Dump after WPA based types groups
Congruence classes: 4 with total: 5 items (in a non-singular class: 2)
Class size histogram [number of members]: number of classes
     1:      3
     2:      1
Worklist has been filled with: 0
Address reference subdivision created: 0 new classes.
Dump after callgraph-based congruence reduction
Congruence classes: 4 with total: 5 items (in a non-singular class: 2)
Class size histogram [number of members]: number of classes
     1:      3
     2:      1
Init called for 2 items (40.00%).
Dump after full equality comparison of groups
Congruence classes: 4 with total: 5 items (in a non-singular class: 2)
Class size histogram [number of members]: number of classes
     1:      3
     2:      1
Worklist has been filled with: 0
Address reference subdivision created: 0 new classes.
Congruence classes: 4 with total: 5 items (in a non-singular class: 2)
Class size histogram [number of members]: number of classes
     1:      3
     2:      1

Item count: 5
Congruent classes before: 4, after: 4
Average class size before: 1.25, after: 1.25
Average non-singular class size: 2.00, count: 1
Equal symbols: 1
Totally needed symbols: 2, fraction of loaded symbols: 100.00%


Symbols to be put in SSA form
{ D.5811 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 3
Number of blocks to update: 2 ( 67%)



Analyzing function: Det_Start/16
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Analyzing function body size: Det_Start/16

IPA function summary for Det_Start/16 inlinable
  global time:     12.000000
  self size:       4
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Det_Init/12 function not considered for inlining
      freq:1.00 loop depth: 0 size: 1 time: 10 callee size: 1 stack: 0


Analyzing function: Det_Start/16
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Analyzing function body size: Det_Start/16

IPA function summary for Det_Start/16 inlinable
  global time:     12.000000
  self size:       4
  global size:     4
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Det_Init/12 function not considered for inlining
      freq:1.00 loop depth: 0 size: 1 time: 10 callee size: 1 stack: 0



 local analysis of Det_Start/16
   scanning: Det_Init (); [tail call]
  scanning: return;
Function is locally const.

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Det_Start ()
{
  <bb 2> [local count: 1073741824]:
  Det_Init (); [tail call]
  return;

}


Det_ReportTransientFault (uint16 ModuleId, uint8 InstanceId, uint8 ApiId, uint8 FaultId)
{
  uint32 u32CoreId;
  unsigned char _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = Sys_GetCoreID ();
  u32CoreId_4 = (uint32) _1;
  # DEBUG u32CoreId => u32CoreId_4
  # DEBUG BEGIN_STMT
  Det_TransientModuleId[u32CoreId_4] = ModuleId_5(D);
  # DEBUG BEGIN_STMT
  Det_TransientInstanceId[u32CoreId_4] = InstanceId_7(D);
  # DEBUG BEGIN_STMT
  Det_TransientApiId[u32CoreId_4] = ApiId_9(D);
  # DEBUG BEGIN_STMT
  Det_TransientFaultId[u32CoreId_4] = FaultId_11(D);
  # DEBUG BEGIN_STMT
  return 0;

}


Det_ReportRuntimeError (uint16 ModuleId, uint8 InstanceId, uint8 ApiId, uint8 ErrorId)
{
  uint32 u32CoreId;
  unsigned char _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = Sys_GetCoreID ();
  u32CoreId_4 = (uint32) _1;
  # DEBUG u32CoreId => u32CoreId_4
  # DEBUG BEGIN_STMT
  Det_RuntimeModuleId[u32CoreId_4] = ModuleId_5(D);
  # DEBUG BEGIN_STMT
  Det_RuntimeInstanceId[u32CoreId_4] = InstanceId_7(D);
  # DEBUG BEGIN_STMT
  Det_RuntimeApiId[u32CoreId_4] = ApiId_9(D);
  # DEBUG BEGIN_STMT
  Det_RuntimeErrorId[u32CoreId_4] = ErrorId_11(D);
  # DEBUG BEGIN_STMT
  return 0;

}


Det_ReportError (uint16 ModuleId, uint8 InstanceId, uint8 ApiId, uint8 ErrorId)
{
  uint32 u32CoreId;
  unsigned char _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = Sys_GetCoreID ();
  u32CoreId_4 = (uint32) _1;
  # DEBUG u32CoreId => u32CoreId_4
  # DEBUG BEGIN_STMT
  Det_ModuleId[u32CoreId_4] = ModuleId_5(D);
  # DEBUG BEGIN_STMT
  Det_InstanceId[u32CoreId_4] = InstanceId_7(D);
  # DEBUG BEGIN_STMT
  Det_ApiId[u32CoreId_4] = ApiId_9(D);
  # DEBUG BEGIN_STMT
  Det_ErrorId[u32CoreId_4] = ErrorId_11(D);
  # DEBUG BEGIN_STMT
  return 0;

}


Det_Init ()
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  return;

}


