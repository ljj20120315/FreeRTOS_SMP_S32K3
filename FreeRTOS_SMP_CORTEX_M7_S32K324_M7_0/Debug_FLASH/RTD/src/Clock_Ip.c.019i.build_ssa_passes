Clock_Ip_GetConfiguredFrequencyValue (Clock_Ip_NameType ClockName)
{
  uint32 Index;
  uint32 ReturnValue;
  uint32 D.6793;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReturnValue = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.27_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.27_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.28_2 = Clock_Ip_pxConfig;
  _3 = Clock_Ip_pxConfig.28_2->ConfiguredFrequencies[Index].Name;
  if (ClockName == _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.29_4 = Clock_Ip_pxConfig;
  ReturnValue = Clock_Ip_pxConfig.29_4->ConfiguredFrequencies[Index].ConfiguredFrequencyValue;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.30_5 = Clock_Ip_pxConfig;
  _6 = Clock_Ip_pxConfig.30_5->ConfigureFrequenciesCount;
  _7 = (long unsigned int) _6;
  if (Index < _7)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.6793 = ReturnValue;
  return D.6793;

}


Clock_Ip_TimeoutExpired (uint32 * StartTimeInOut, uint32 * ElapsedTimeInOut, uint32 TimeoutTicks)
{
  boolean D.6787;
  long unsigned int D.6786;

  <bb 2> :
  # DEBUG BEGIN_STMT
  D.6786 = OsIf_GetElapsed (StartTimeInOut, 0);
  _1 = *ElapsedTimeInOut;
  _2 = D.6786 + _1;
  *ElapsedTimeInOut = _2;
  # DEBUG BEGIN_STMT
  _3 = *ElapsedTimeInOut;
  D.6787 = TimeoutTicks <= _3;
  return D.6787;

}


Clock_Ip_StartTimeout (uint32 * StartTimeOut, uint32 * ElapsedTimeOut, uint32 * TimeoutTicksOut, uint32 TimeoutUs)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = OsIf_GetCounter (0);
  *StartTimeOut = _1;
  # DEBUG BEGIN_STMT
  *ElapsedTimeOut = 0;
  # DEBUG BEGIN_STMT
  _2 = OsIf_MicrosToTicks (TimeoutUs, 0);
  *TimeoutTicksOut = _2;
  return;

}


Clock_Ip_ReportClockErrors (Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback.26_1 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.26_1 (Error, ClockName);
  return;

}


Clock_Ip_EnableSircInStandby ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized.25_1 = Clock_Ip_bObjectsAreInitialized;
  _2 = ~Clock_Ip_bObjectsAreInitialized.25_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockInitializeObjects ();
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  EnableSircInStandbyMode ();
  return;

}


Clock_Ip_DisableSircInStandby ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized.24_1 = Clock_Ip_bObjectsAreInitialized;
  _2 = ~Clock_Ip_bObjectsAreInitialized.24_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockInitializeObjects ();
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  DisableSircInStandbyMode ();
  return;

}


Clock_Ip_EnableFircInStandby ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized.23_1 = Clock_Ip_bObjectsAreInitialized;
  _2 = ~Clock_Ip_bObjectsAreInitialized.23_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockInitializeObjects ();
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  EnableFircInStandbyMode ();
  return;

}


Clock_Ip_DisableFircInStandby ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized.22_1 = Clock_Ip_bObjectsAreInitialized;
  _2 = ~Clock_Ip_bObjectsAreInitialized.22_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockInitializeObjects ();
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  DisableFircInStandbyMode ();
  return;

}


Clock_Ip_EnableModuleClock (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8GateCallbackIndex[_2];
  CallbackIndex = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axGateCallbacks[CallbackIndex].Update;
  _4 (ClockName, 0);
  return;

}


Clock_Ip_DisableModuleClock (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8GateCallbackIndex[_2];
  CallbackIndex = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axGateCallbacks[CallbackIndex].Update;
  _4 (ClockName, 1);
  return;

}


Clock_Ip_InstallNotificationsCallback (void (*Clock_Ip_NotificationsCallbackType) (Clock_Ip_NotificationType, Clock_Ip_NameType) Callback)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback = Callback;
  return;

}


Clock_Ip_ClearClockMonitorStatus (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8CmuCallbackIndex[_2];
  CallbackIndex = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axCmuCallbacks[CallbackIndex].Clear;
  _4 (ClockName);
  return;

}


Clock_Ip_GetClockMonitorStatus (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  Clock_Ip_CmuStatusType D.6776;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8CmuCallbackIndex[_2];
  CallbackIndex = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axCmuCallbacks[CallbackIndex].GetStatus;
  D.6776 = _4 (ClockName);
  return D.6776;

}


Clock_Ip_DisableClockMonitor (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8CmuCallbackIndex[_2];
  CallbackIndex = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axCmuCallbacks[CallbackIndex].Disable;
  _4 (ClockName);
  return;

}


Clock_Ip_DistributePll ()
{
  uint32 CallbackIndex;
  uint32 Index;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.9_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.9_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.10_2 = Clock_Ip_pxConfig;
  _3 = Clock_Ip_pxConfig.10_2->Selectors[Index].Value;
  _4 = Clock_Ip_aeSourceTypeClockName[_3];
  if (_4 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.11_5 = Clock_Ip_pxConfig;
  _6 = Clock_Ip_pxConfig.11_5->Selectors[Index].Name;
  _7 = Clock_Ip_au8ClockFeatures[_6][1];
  _8 = (int) _7;
  _9 = Clock_Ip_au8SelectorCallbackIndex[_8];
  CallbackIndex = (uint32) _9;
  # DEBUG BEGIN_STMT
  _10 = Clock_Ip_axSelectorCallbacks[CallbackIndex].Set;
  Clock_Ip_pxConfig.12_11 = Clock_Ip_pxConfig;
  _12 = &Clock_Ip_pxConfig.12_11->Selectors[Index];
  _10 (_12);

  <bb 6> :
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.13_13 = Clock_Ip_pxConfig;
  _14 = Clock_Ip_pxConfig.13_13->SelectorsCount;
  _15 = (long unsigned int) _14;
  if (Index < _15)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bClockTreeIsConsumingPll.14_16 = Clock_Ip_bClockTreeIsConsumingPll;
  if (Clock_Ip_bClockTreeIsConsumingPll.14_16 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.15_17 = Clock_Ip_pxConfig;
  _18 = Clock_Ip_pxConfig.15_17->Gates[Index].Name;
  _19 = Clock_Ip_au8ClockFeatures[_18][1];
  _20 = (int) _19;
  _21 = Clock_Ip_au8GateCallbackIndex[_20];
  CallbackIndex = (uint32) _21;
  # DEBUG BEGIN_STMT
  _22 = Clock_Ip_axGateCallbacks[CallbackIndex].Set;
  Clock_Ip_pxConfig.16_23 = Clock_Ip_pxConfig;
  _24 = &Clock_Ip_pxConfig.16_23->Gates[Index];
  _22 (_24);
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.17_25 = Clock_Ip_pxConfig;
  _26 = Clock_Ip_pxConfig.17_25->GatesCount;
  _27 = (long unsigned int) _26;
  if (Index < _27)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.18_28 = Clock_Ip_pxConfig;
  _29 = &Clock_Ip_pxConfig.18_28->SpecificPeriphalConfiguration;
  Clock_Ip_SpecificPeripheralClockInitialization (_29);
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.19_30 = Clock_Ip_pxConfig;
  _31 = Clock_Ip_pxConfig.19_30->Cmus[Index].Name;
  _32 = Clock_Ip_au8ClockFeatures[_31][1];
  _33 = (int) _32;
  _34 = Clock_Ip_au8CmuCallbackIndex[_33];
  CallbackIndex = (uint32) _34;
  # DEBUG BEGIN_STMT
  _35 = Clock_Ip_axCmuCallbacks[CallbackIndex].Enable;
  Clock_Ip_pxConfig.20_36 = Clock_Ip_pxConfig;
  _37 = &Clock_Ip_pxConfig.20_36->Cmus[Index];
  _35 (_37);
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.21_38 = Clock_Ip_pxConfig;
  _39 = Clock_Ip_pxConfig.21_38->CmusCount;
  _40 = (long unsigned int) _39;
  if (Index < _40)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  return;

}


Clock_Ip_GetPllStatus ()
{
  uint32 CallbackIndex;
  uint32 Index;
  Clock_Ip_PllStatusReturnType PllStatus;
  Clock_Ip_PllStatusType RetValue;
  Clock_Ip_PllStatusType D.6768;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetValue = 2;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_aeHwPllName[Index];
  _2 = Clock_Ip_au8ClockFeatures[_1][1];
  _3 = (int) _2;
  _4 = Clock_Ip_au8PllCallbackIndex[_3];
  CallbackIndex = (uint32) _4;
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_axPllCallbacks[CallbackIndex].Complete;
  _6 = Clock_Ip_aeHwPllName[Index];
  PllStatus = _5 (_6);
  # DEBUG BEGIN_STMT
  if (PllStatus == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  RetValue = 1;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (PllStatus == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetValue = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (Index == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.6768 = RetValue;
  return D.6768;

}


Clock_Ip_InitClock (const struct Clock_Ip_ClockConfigType * Config)
{
  uint32 Index;
  uint32 CallbackIndex;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig = Config;
  # DEBUG BEGIN_STMT
  Clock_Ip_SpecificPlatformInitClock (Config);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.1_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.1_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = Config->Cmus[Index].Name;
  _3 = Clock_Ip_au8ClockFeatures[_2][1];
  _4 = (int) _3;
  _5 = Clock_Ip_au8CmuCallbackIndex[_4];
  CallbackIndex = (uint32) _5;
  # DEBUG BEGIN_STMT
  _6 = Clock_Ip_axCmuCallbacks[CallbackIndex].Reset;
  _7 = &Config->Cmus[Index];
  _6 (_7);
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = Config->CmusCount;
  _9 = (long unsigned int) _8;
  if (Index < _9)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ResetClockConfiguration (Config);
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = Config->Ircoscs[Index].Name;
  _11 = Clock_Ip_au8ClockFeatures[_10][1];
  _12 = (int) _11;
  _13 = Clock_Ip_au8IrcoscCallbackIndex[_12];
  CallbackIndex = (uint32) _13;
  # DEBUG BEGIN_STMT
  _14 = Clock_Ip_axIntOscCallbacks[CallbackIndex].Set;
  _15 = &Config->Ircoscs[Index];
  _14 (_15);
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _16 = Config->IrcoscsCount;
  _17 = (long unsigned int) _16;
  if (Index < _17)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _18 = Config->Xoscs[Index].Name;
  _19 = Clock_Ip_au8ClockFeatures[_18][1];
  _20 = (int) _19;
  _21 = Clock_Ip_au8XoscCallbackIndex[_20];
  CallbackIndex = (uint32) _21;
  # DEBUG BEGIN_STMT
  _22 = Clock_Ip_axExtOscCallbacks[CallbackIndex].Set;
  _23 = &Config->Xoscs[Index];
  _22 (_23);
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  _24 = Config->XoscsCount;
  _25 = (long unsigned int) _24;
  if (Index < _25)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Clock_Ip_UpdateDriverContext (Config);
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _26 = Config->Pcfs[Index].Name;
  _27 = Clock_Ip_au8ClockFeatures[_26][1];
  _28 = (int) _27;
  _29 = Clock_Ip_au8PcfsCallbackIndex[_28];
  CallbackIndex = (uint32) _29;
  # DEBUG BEGIN_STMT
  _30 = Clock_Ip_axPcfsCallbacks[CallbackIndex].Set;
  _31 = &Config->Pcfs[Index];
  _30 (_31);
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  _32 = Config->PcfsCount;
  _33 = (long unsigned int) _32;
  if (Index < _33)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _34 = Config->DividerTriggers[Index].Name;
  _35 = Clock_Ip_au8ClockFeatures[_34][1];
  _36 = (int) _35;
  _37 = Clock_Ip_au8DividerTriggerCallbackIndex[_36];
  CallbackIndex = (uint32) _37;
  # DEBUG BEGIN_STMT
  _38 = Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure;
  _39 = &Config->DividerTriggers[Index];
  _38 (_39);
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 17> :
  # DEBUG BEGIN_STMT
  _40 = Config->DividerTriggersCount;
  _41 = (long unsigned int) _40;
  if (Index < _41)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _42 = Config->Dividers[Index].Name;
  _43 = Clock_Ip_au8ClockFeatures[_42][1];
  _44 = (int) _43;
  _45 = Clock_Ip_au8DividerCallbackIndex[_44];
  CallbackIndex = (uint32) _45;
  # DEBUG BEGIN_STMT
  _46 = Clock_Ip_axDividerCallbacks[CallbackIndex].Set;
  _47 = &Config->Dividers[Index];
  _46 (_47);
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 20> :
  # DEBUG BEGIN_STMT
  _48 = Config->DividersCount;
  _49 = (long unsigned int) _48;
  if (Index < _49)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _50 = Config->DividerTriggers[Index].Name;
  _51 = Clock_Ip_au8ClockFeatures[_50][1];
  _52 = (int) _51;
  _53 = Clock_Ip_au8DividerTriggerCallbackIndex[_52];
  CallbackIndex = (uint32) _53;
  # DEBUG BEGIN_STMT
  _54 = Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate;
  _55 = &Config->DividerTriggers[Index];
  _54 (_55);
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 23> :
  # DEBUG BEGIN_STMT
  _56 = Config->DividerTriggersCount;
  _57 = (long unsigned int) _56;
  if (Index < _57)
    goto <bb 22>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  _58 = Config->Plls[Index].Name;
  _59 = Clock_Ip_au8ClockFeatures[_58][1];
  _60 = (int) _59;
  _61 = Clock_Ip_au8PllCallbackIndex[_60];
  CallbackIndex = (uint32) _61;
  # DEBUG BEGIN_STMT
  _62 = Clock_Ip_axPllCallbacks[CallbackIndex].Set;
  _63 = &Config->Plls[Index];
  _62 (_63);
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 26> :
  # DEBUG BEGIN_STMT
  _64 = Config->PllsCount;
  _65 = (long unsigned int) _64;
  if (Index < _65)
    goto <bb 25>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 29>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  _66 = Config->Cmus[Index].Name;
  _67 = Clock_Ip_au8ClockFeatures[_66][1];
  _68 = (int) _67;
  _69 = Clock_Ip_au8CmuCallbackIndex[_68];
  CallbackIndex = (uint32) _69;
  # DEBUG BEGIN_STMT
  _70 = Clock_Ip_axCmuCallbacks[CallbackIndex].Set;
  _71 = &Config->Cmus[Index];
  _70 (_71);
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 29> :
  # DEBUG BEGIN_STMT
  _72 = Config->CmusCount;
  _73 = (long unsigned int) _72;
  if (Index < _73)
    goto <bb 28>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 32>; [INV]

  <bb 31> :
  # DEBUG BEGIN_STMT
  _74 = Config->Xoscs[Index].Name;
  _75 = Clock_Ip_au8ClockFeatures[_74][1];
  _76 = (int) _75;
  _77 = Clock_Ip_au8XoscCallbackIndex[_76];
  CallbackIndex = (uint32) _77;
  # DEBUG BEGIN_STMT
  _78 = Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete;
  _79 = &Config->Xoscs[Index];
  _78 (_79);
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 32> :
  # DEBUG BEGIN_STMT
  _80 = Config->XoscsCount;
  _81 = (long unsigned int) _80;
  if (Index < _81)
    goto <bb 31>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 33> :
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 35>; [INV]

  <bb 34> :
  # DEBUG BEGIN_STMT
  _82 = Config->Plls[Index].Name;
  _83 = Clock_Ip_au8ClockFeatures[_82][1];
  _84 = (int) _83;
  _85 = Clock_Ip_au8PllCallbackIndex[_84];
  CallbackIndex = (uint32) _85;
  # DEBUG BEGIN_STMT
  _86 = Clock_Ip_axPllCallbacks[CallbackIndex].Enable;
  _87 = &Config->Plls[Index];
  _86 (_87);
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 35> :
  # DEBUG BEGIN_STMT
  _88 = Config->PllsCount;
  _89 = (long unsigned int) _88;
  if (Index < _89)
    goto <bb 34>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 36> :
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 38>; [INV]

  <bb 37> :
  # DEBUG BEGIN_STMT
  _90 = Config->FracDivs[Index].Name;
  _91 = Clock_Ip_au8ClockFeatures[_90][1];
  _92 = (int) _91;
  _93 = Clock_Ip_au8FractionalDividerCallbackIndex[_92];
  CallbackIndex = (uint32) _93;
  # DEBUG BEGIN_STMT
  _94 = Clock_Ip_axFracDivCallbacks[CallbackIndex].Set;
  _95 = &Config->FracDivs[Index];
  _94 (_95);
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 38> :
  # DEBUG BEGIN_STMT
  _96 = Config->FracDivsCount;
  _97 = (long unsigned int) _96;
  if (Index < _97)
    goto <bb 37>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 39> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback.2_98 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.2_98 (4, 145);
  # DEBUG BEGIN_STMT
  Clock_Ip_SetRamWaitStates ();
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback.3_99 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.3_99 (5, 145);
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback.4_100 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.4_100 (6, 145);
  # DEBUG BEGIN_STMT
  Clock_Ip_SetFlashWaitStates ();
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback.5_101 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.5_101 (7, 145);
  # DEBUG BEGIN_STMT
  Clock_Ip_bClockTreeIsConsumingPll = 0;
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 44>; [INV]

  <bb 40> :
  # DEBUG BEGIN_STMT
  _102 = Config->Selectors[Index].Value;
  _103 = Clock_Ip_aeSourceTypeClockName[_102];
  if (_103 != 3)
    goto <bb 41>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 41> :
  # DEBUG BEGIN_STMT
  _104 = Config->Selectors[Index].Name;
  _105 = Clock_Ip_au8ClockFeatures[_104][1];
  _106 = (int) _105;
  _107 = Clock_Ip_au8SelectorCallbackIndex[_106];
  CallbackIndex = (uint32) _107;
  # DEBUG BEGIN_STMT
  _108 = Clock_Ip_axSelectorCallbacks[CallbackIndex].Set;
  _109 = &Config->Selectors[Index];
  _108 (_109);
  goto <bb 43>; [INV]

  <bb 42> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bClockTreeIsConsumingPll = 1;

  <bb 43> :
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 44> :
  # DEBUG BEGIN_STMT
  _110 = Config->SelectorsCount;
  _111 = (long unsigned int) _110;
  if (Index < _111)
    goto <bb 40>; [INV]
  else
    goto <bb 45>; [INV]

  <bb 45> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bClockTreeIsConsumingPll.6_112 = Clock_Ip_bClockTreeIsConsumingPll;
  _113 = ~Clock_Ip_bClockTreeIsConsumingPll.6_112;
  if (_113 != 0)
    goto <bb 46>; [INV]
  else
    goto <bb 52>; [INV]

  <bb 46> :
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 48>; [INV]

  <bb 47> :
  # DEBUG BEGIN_STMT
  _114 = Config->Gates[Index].Name;
  _115 = Clock_Ip_au8ClockFeatures[_114][1];
  _116 = (int) _115;
  _117 = Clock_Ip_au8GateCallbackIndex[_116];
  CallbackIndex = (uint32) _117;
  # DEBUG BEGIN_STMT
  _118 = Clock_Ip_axGateCallbacks[CallbackIndex].Set;
  _119 = &Config->Gates[Index];
  _118 (_119);
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 48> :
  # DEBUG BEGIN_STMT
  _120 = Config->GatesCount;
  _121 = (long unsigned int) _120;
  if (Index < _121)
    goto <bb 47>; [INV]
  else
    goto <bb 49>; [INV]

  <bb 49> :
  # DEBUG BEGIN_STMT
  _122 = &Config->SpecificPeriphalConfiguration;
  Clock_Ip_SpecificPeripheralClockInitialization (_122);
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 51>; [INV]

  <bb 50> :
  # DEBUG BEGIN_STMT
  _123 = Config->Cmus[Index].Name;
  _124 = Clock_Ip_au8ClockFeatures[_123][1];
  _125 = (int) _124;
  _126 = Clock_Ip_au8CmuCallbackIndex[_125];
  CallbackIndex = (uint32) _126;
  # DEBUG BEGIN_STMT
  _127 = Clock_Ip_axCmuCallbacks[CallbackIndex].Enable;
  _128 = &Config->Cmus[Index];
  _127 (_128);
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 51> :
  # DEBUG BEGIN_STMT
  _129 = Config->CmusCount;
  _130 = (long unsigned int) _129;
  if (Index < _130)
    goto <bb 50>; [INV]
  else
    goto <bb 52>; [INV]

  <bb 52> :
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_Init (const struct Clock_Ip_ClockConfigType * Config)
{
  Clock_Ip_PllStatusType PllStatus;
  Clock_Ip_StatusType ClockStatus;
  Clock_Ip_StatusType D.6750;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ClockStatus = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_InitClock (Config);
  # DEBUG BEGIN_STMT
  Clock_Ip_bClockTreeIsConsumingPll.0_1 = Clock_Ip_bClockTreeIsConsumingPll;
  if (Clock_Ip_bClockTreeIsConsumingPll.0_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  PllStatus = Clock_Ip_GetPllStatus ();
  # DEBUG BEGIN_STMT
  if (PllStatus == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_DistributePll ();
  # DEBUG BEGIN_STMT
  ClockStatus = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  ClockStatus = 0;

  <bb 6> :
  # DEBUG BEGIN_STMT
  D.6750 = ClockStatus;
  return D.6750;

}


Clock_Ip_ResetClockConfiguration (const struct Clock_Ip_ClockConfigType * Config)
{
  uint32 Index;
  uint32 CallbackIndex;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Config->SelectorsCount;
  Index = (uint32) _1;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Index + 4294967295;
  _3 = Config->Selectors[_2].Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][1];
  _5 = (int) _4;
  _6 = Clock_Ip_au8SelectorCallbackIndex[_5];
  CallbackIndex = (uint32) _6;
  # DEBUG BEGIN_STMT
  _7 = Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset;
  _8 = Index + 4294967295;
  _9 = &Config->Selectors[_8];
  _7 (_9);
  # DEBUG BEGIN_STMT
  Index = Index + 4294967295;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (Index != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _10 = Config->FracDivsCount;
  Index = (uint32) _10;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _11 = Index + 4294967295;
  _12 = Config->FracDivs[_11].Name;
  _13 = Clock_Ip_au8ClockFeatures[_12][1];
  _14 = (int) _13;
  _15 = Clock_Ip_au8FractionalDividerCallbackIndex[_14];
  CallbackIndex = (uint32) _15;
  # DEBUG BEGIN_STMT
  _16 = Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset;
  _17 = Index + 4294967295;
  _18 = &Config->FracDivs[_17];
  _16 (_18);
  # DEBUG BEGIN_STMT
  Index = Index + 4294967295;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (Index != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _19 = Config->PllsCount;
  Index = (uint32) _19;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _20 = Index + 4294967295;
  _21 = Config->Plls[_20].Name;
  _22 = Clock_Ip_au8ClockFeatures[_21][1];
  _23 = (int) _22;
  _24 = Clock_Ip_au8PllCallbackIndex[_23];
  CallbackIndex = (uint32) _24;
  # DEBUG BEGIN_STMT
  _25 = Clock_Ip_axPllCallbacks[CallbackIndex].Reset;
  _26 = Index + 4294967295;
  _27 = &Config->Plls[_26];
  _25 (_27);
  # DEBUG BEGIN_STMT
  Index = Index + 4294967295;

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (Index != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _28 = Config->XoscsCount;
  Index = (uint32) _28;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _29 = Index + 4294967295;
  _30 = Config->Xoscs[_29].Name;
  _31 = Clock_Ip_au8ClockFeatures[_30][1];
  _32 = (int) _31;
  _33 = Clock_Ip_au8XoscCallbackIndex[_32];
  CallbackIndex = (uint32) _33;
  # DEBUG BEGIN_STMT
  _34 = Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset;
  _35 = Index + 4294967295;
  _36 = &Config->Xoscs[_35];
  _34 (_36);
  # DEBUG BEGIN_STMT
  Index = Index + 4294967295;

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (Index != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  return;

}


Clock_Ip_CallEmptyCallbacks ()
{
  static boolean FunctionWasCalled = 0;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FunctionWasCalled.8_1 = FunctionWasCalled;
  _2 = ~FunctionWasCalled.8_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FunctionWasCalled = 1;
  # DEBUG BEGIN_STMT
  _3 = Clock_Ip_axCmuCallbacks[0].Set;
  _3 (0B);
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axCmuCallbacks[0].Disable;
  _4 (145);
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_axCmuCallbacks[0].Clear;
  _5 (145);
  # DEBUG BEGIN_STMT
  _6 = Clock_Ip_axCmuCallbacks[0].GetStatus;
  _6 (145);
  # DEBUG BEGIN_STMT
  _7 = Clock_Ip_axDividerCallbacks[0].Set;
  _7 (0B);
  # DEBUG BEGIN_STMT
  _8 = Clock_Ip_axDividerTriggerCallbacks[0].Configure;
  _8 (0B);
  # DEBUG BEGIN_STMT
  _9 = Clock_Ip_axExtOscCallbacks[0].Reset;
  _9 (0B);
  # DEBUG BEGIN_STMT
  _10 = Clock_Ip_axFracDivCallbacks[0].Set;
  _10 (0B);
  # DEBUG BEGIN_STMT
  _11 = Clock_Ip_axFracDivCallbacks[0].Complete;
  _11 (145);
  # DEBUG BEGIN_STMT
  _12 = Clock_Ip_axGateCallbacks[0].Set;
  _12 (0B);
  # DEBUG BEGIN_STMT
  _13 = Clock_Ip_axGateCallbacks[0].Update;
  _13 (145, 0);
  # DEBUG BEGIN_STMT
  _14 = Clock_Ip_axIntOscCallbacks[0].Set;
  _14 (0B);
  # DEBUG BEGIN_STMT
  _15 = Clock_Ip_axPllCallbacks[0].Set;
  _15 (0B);
  # DEBUG BEGIN_STMT
  _16 = Clock_Ip_axPllCallbacks[0].Complete;
  _16 (145);
  # DEBUG BEGIN_STMT
  _17 = Clock_Ip_axSelectorCallbacks[0].Set;
  _17 (0B);
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_axPcfsCallbacks[0].Set;
  _18 (0B);

  <bb 4> :
  return;

}


Clock_Ip_UpdateDriverContext (const struct Clock_Ip_ClockConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized.7_1 = Clock_Ip_bObjectsAreInitialized;
  _2 = ~Clock_Ip_bObjectsAreInitialized.7_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockInitializeObjects ();
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_CallEmptyCallbacks ();
  return;

}


Clock_Ip_NotificatonsEmptyCallback (Clock_Ip_NotificationType Notification, Clock_Ip_NameType ClockName)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


