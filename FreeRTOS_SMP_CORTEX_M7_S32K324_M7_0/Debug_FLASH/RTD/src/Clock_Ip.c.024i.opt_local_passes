Clock_Ip_GetConfiguredFrequencyValue (Clock_Ip_NameType ClockName)
{
  uint32 Index;
  uint32 ReturnValue;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.27_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.28_2;
  <unnamed type> _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.29_4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.30_5;
  unsigned char _6;
  long unsigned int _7;
  uint32 _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReturnValue_10 = 0;
  # DEBUG ReturnValue => ReturnValue_10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.27_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.27_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Index_12 = 0;
  # DEBUG Index => Index_12
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.28_2 = Clock_Ip_pxConfig;
  _3 = Clock_Ip_pxConfig.28_2->ConfiguredFrequencies[Index_9].Name;
  if (ClockName_13(D) == _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.29_4 = Clock_Ip_pxConfig;
  ReturnValue_15 = Clock_Ip_pxConfig.29_4->ConfiguredFrequencies[Index_9].ConfiguredFrequencyValue;
  # DEBUG ReturnValue => ReturnValue_15
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Index_14 = Index_9 + 1;
  # DEBUG Index => Index_14

  <bb 7> :
  # Index_9 = PHI <Index_12(3), Index_14(6)>
  # DEBUG Index => Index_9
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.30_5 = Clock_Ip_pxConfig;
  _6 = Clock_Ip_pxConfig.30_5->ConfigureFrequenciesCount;
  _7 = (long unsigned int) _6;
  if (Index_9 < _7)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # ReturnValue_8 = PHI <ReturnValue_10(2), ReturnValue_15(5), ReturnValue_10(7)>
  # DEBUG ReturnValue => ReturnValue_8
  # DEBUG BEGIN_STMT
  _16 = ReturnValue_8;
  return _16;

}


Clock_Ip_TimeoutExpired (uint32 * StartTimeInOut, uint32 * ElapsedTimeInOut, uint32 TimeoutTicks)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _7;
  boolean _11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _7 = OsIf_GetElapsed (StartTimeInOut_5(D), 0);
  _1 = *ElapsedTimeInOut_8(D);
  _2 = _7 + _1;
  *ElapsedTimeInOut_8(D) = _2;
  # DEBUG BEGIN_STMT
  _3 = *ElapsedTimeInOut_8(D);
  _11 = TimeoutTicks_10(D) <= _3;
  return _11;

}


Clock_Ip_StartTimeout (uint32 * StartTimeOut, uint32 * ElapsedTimeOut, uint32 * TimeoutTicksOut, uint32 TimeoutUs)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = OsIf_GetCounter (0);
  *StartTimeOut_5(D) = _1;
  # DEBUG BEGIN_STMT
  *ElapsedTimeOut_7(D) = 0;
  # DEBUG BEGIN_STMT
  _2 = OsIf_MicrosToTicks (TimeoutUs_9(D), 0);
  *TimeoutTicksOut_11(D) = _2;
  return;

}


Clock_Ip_ReportClockErrors (Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
  void (*<T534>) (Clock_Ip_NotificationType, Clock_Ip_NameType) Clock_Ip_pfkNotificationsCallback.26_1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback.26_1 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.26_1 (Error_3(D), ClockName_4(D));
  return;

}


Clock_Ip_EnableSircInStandby ()
{
  _Bool Clock_Ip_bObjectsAreInitialized.25_1;
  _Bool _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized.25_1 = Clock_Ip_bObjectsAreInitialized;
  _2 = ~Clock_Ip_bObjectsAreInitialized.25_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockInitializeObjects ();
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  EnableSircInStandbyMode ();
  return;

}


Clock_Ip_DisableSircInStandby ()
{
  _Bool Clock_Ip_bObjectsAreInitialized.24_1;
  _Bool _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized.24_1 = Clock_Ip_bObjectsAreInitialized;
  _2 = ~Clock_Ip_bObjectsAreInitialized.24_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockInitializeObjects ();
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  DisableSircInStandbyMode ();
  return;

}


Clock_Ip_EnableFircInStandby ()
{
  _Bool Clock_Ip_bObjectsAreInitialized.23_1;
  _Bool _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized.23_1 = Clock_Ip_bObjectsAreInitialized;
  _2 = ~Clock_Ip_bObjectsAreInitialized.23_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockInitializeObjects ();
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  EnableFircInStandbyMode ();
  return;

}


Clock_Ip_DisableFircInStandby ()
{
  _Bool Clock_Ip_bObjectsAreInitialized.22_1;
  _Bool _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized.22_1 = Clock_Ip_bObjectsAreInitialized;
  _2 = ~Clock_Ip_bObjectsAreInitialized.22_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockInitializeObjects ();
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  DisableFircInStandbyMode ();
  return;

}


Clock_Ip_EnableModuleClock (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T69b>) (Clock_Ip_NameType, boolean) _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8GateCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  # DEBUG CallbackIndex => CallbackIndex_7
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axGateCallbacks[CallbackIndex_7].Update;
  _4 (ClockName_6(D), 0);
  return;

}


Clock_Ip_DisableModuleClock (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T69b>) (Clock_Ip_NameType, boolean) _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8GateCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  # DEBUG CallbackIndex => CallbackIndex_7
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axGateCallbacks[CallbackIndex_7].Update;
  _4 (ClockName_6(D), 1);
  return;

}


Clock_Ip_InstallNotificationsCallback (void (*Clock_Ip_NotificationsCallbackType) (Clock_Ip_NotificationType, Clock_Ip_NameType) Callback)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback = Callback_2(D);
  return;

}


Clock_Ip_ClearClockMonitorStatus (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T635>) (Clock_Ip_NameType) _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8CmuCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  # DEBUG CallbackIndex => CallbackIndex_7
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axCmuCallbacks[CallbackIndex_7].Clear;
  _4 (ClockName_6(D));
  return;

}


Clock_Ip_GetClockMonitorStatus (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  Clock_Ip_CmuStatusType (*<T6ac>) (Clock_Ip_NameType) _4;
  Clock_Ip_CmuStatusType _9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8CmuCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  # DEBUG CallbackIndex => CallbackIndex_7
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axCmuCallbacks[CallbackIndex_7].GetStatus;
  _9 = _4 (ClockName_6(D));
  return _9;

}


Clock_Ip_DisableClockMonitor (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T635>) (Clock_Ip_NameType) _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8CmuCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  # DEBUG CallbackIndex => CallbackIndex_7
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axCmuCallbacks[CallbackIndex_7].Disable;
  _4 (ClockName_6(D));
  return;

}


Clock_Ip_DistributePll ()
{
  uint32 CallbackIndex;
  uint32 Index;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.9_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.10_2;
  <unnamed type> _3;
  <unnamed type> _4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.11_5;
  <unnamed type> _6;
  unsigned char _7;
  int _8;
  unsigned char _9;
  void (*<T68a>) (const struct Clock_Ip_SelectorConfigType *) _10;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.12_11;
  const struct Clock_Ip_SelectorConfigType * _12;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.13_13;
  unsigned char _14;
  long unsigned int _15;
  _Bool Clock_Ip_bClockTreeIsConsumingPll.14_16;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.15_17;
  <unnamed type> _18;
  unsigned char _19;
  int _20;
  unsigned char _21;
  void (*<T696>) (const struct Clock_Ip_GateConfigType *) _22;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.16_23;
  const struct Clock_Ip_GateConfigType * _24;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.17_25;
  unsigned char _26;
  long unsigned int _27;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.18_28;
  const struct Clock_IP_SpecificPeriphConfigType * _29;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.19_30;
  <unnamed type> _31;
  unsigned char _32;
  int _33;
  unsigned char _34;
  void (*<T6a6>) (const struct Clock_Ip_CmuConfigType *) _35;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.20_36;
  const struct Clock_Ip_CmuConfigType * _37;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.21_38;
  unsigned char _39;
  long unsigned int _40;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.9_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.9_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Index_50 = 0;
  # DEBUG Index => Index_50
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.10_2 = Clock_Ip_pxConfig;
  _3 = Clock_Ip_pxConfig.10_2->Selectors[Index_41].Value;
  _4 = Clock_Ip_aeSourceTypeClockName[_3];
  if (_4 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.11_5 = Clock_Ip_pxConfig;
  _6 = Clock_Ip_pxConfig.11_5->Selectors[Index_41].Name;
  _7 = Clock_Ip_au8ClockFeatures[_6][1];
  _8 = (int) _7;
  _9 = Clock_Ip_au8SelectorCallbackIndex[_8];
  CallbackIndex_60 = (uint32) _9;
  # DEBUG CallbackIndex => CallbackIndex_60
  # DEBUG BEGIN_STMT
  _10 = Clock_Ip_axSelectorCallbacks[CallbackIndex_60].Set;
  Clock_Ip_pxConfig.12_11 = Clock_Ip_pxConfig;
  _12 = &Clock_Ip_pxConfig.12_11->Selectors[Index_41];
  _10 (_12);

  <bb 6> :
  # DEBUG BEGIN_STMT
  Index_62 = Index_41 + 1;
  # DEBUG Index => Index_62

  <bb 7> :
  # Index_41 = PHI <Index_50(3), Index_62(6)>
  # DEBUG Index => Index_41
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.13_13 = Clock_Ip_pxConfig;
  _14 = Clock_Ip_pxConfig.13_13->SelectorsCount;
  _15 = (long unsigned int) _14;
  if (Index_41 < _15)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bClockTreeIsConsumingPll.14_16 = Clock_Ip_bClockTreeIsConsumingPll;
  if (Clock_Ip_bClockTreeIsConsumingPll.14_16 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Index_51 = 0;
  # DEBUG Index => Index_51
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.15_17 = Clock_Ip_pxConfig;
  _18 = Clock_Ip_pxConfig.15_17->Gates[Index_42].Name;
  _19 = Clock_Ip_au8ClockFeatures[_18][1];
  _20 = (int) _19;
  _21 = Clock_Ip_au8GateCallbackIndex[_20];
  CallbackIndex_57 = (uint32) _21;
  # DEBUG CallbackIndex => CallbackIndex_57
  # DEBUG BEGIN_STMT
  _22 = Clock_Ip_axGateCallbacks[CallbackIndex_57].Set;
  Clock_Ip_pxConfig.16_23 = Clock_Ip_pxConfig;
  _24 = &Clock_Ip_pxConfig.16_23->Gates[Index_42];
  _22 (_24);
  # DEBUG BEGIN_STMT
  Index_59 = Index_42 + 1;
  # DEBUG Index => Index_59

  <bb 11> :
  # Index_42 = PHI <Index_51(9), Index_59(10)>
  # DEBUG Index => Index_42
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.17_25 = Clock_Ip_pxConfig;
  _26 = Clock_Ip_pxConfig.17_25->GatesCount;
  _27 = (long unsigned int) _26;
  if (Index_42 < _27)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.18_28 = Clock_Ip_pxConfig;
  _29 = &Clock_Ip_pxConfig.18_28->SpecificPeriphalConfiguration;
  Clock_Ip_SpecificPeripheralClockInitialization (_29);
  # DEBUG BEGIN_STMT
  Index_53 = 0;
  # DEBUG Index => Index_53
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.19_30 = Clock_Ip_pxConfig;
  _31 = Clock_Ip_pxConfig.19_30->Cmus[Index_43].Name;
  _32 = Clock_Ip_au8ClockFeatures[_31][1];
  _33 = (int) _32;
  _34 = Clock_Ip_au8CmuCallbackIndex[_33];
  CallbackIndex_54 = (uint32) _34;
  # DEBUG CallbackIndex => CallbackIndex_54
  # DEBUG BEGIN_STMT
  _35 = Clock_Ip_axCmuCallbacks[CallbackIndex_54].Enable;
  Clock_Ip_pxConfig.20_36 = Clock_Ip_pxConfig;
  _37 = &Clock_Ip_pxConfig.20_36->Cmus[Index_43];
  _35 (_37);
  # DEBUG BEGIN_STMT
  Index_56 = Index_43 + 1;
  # DEBUG Index => Index_56

  <bb 14> :
  # Index_43 = PHI <Index_53(12), Index_56(13)>
  # DEBUG Index => Index_43
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.21_38 = Clock_Ip_pxConfig;
  _39 = Clock_Ip_pxConfig.21_38->CmusCount;
  _40 = (long unsigned int) _39;
  if (Index_43 < _40)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  return;

}


Clock_Ip_GetPllStatus ()
{
  uint32 CallbackIndex;
  uint32 Index;
  Clock_Ip_PllStatusReturnType PllStatus;
  Clock_Ip_PllStatusType RetValue;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  Clock_Ip_PllStatusReturnType (*<T67d>) (Clock_Ip_NameType) _5;
  <unnamed type> _6;
  Clock_Ip_PllStatusType _22;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetValue_13 = 2;
  # DEBUG RetValue => RetValue_13
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Index_14 = 0;
  # DEBUG Index => Index_14
  goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_aeHwPllName[Index_10];
  _2 = Clock_Ip_au8ClockFeatures[_1][1];
  _3 = (int) _2;
  _4 = Clock_Ip_au8PllCallbackIndex[_3];
  CallbackIndex_16 = (uint32) _4;
  # DEBUG CallbackIndex => CallbackIndex_16
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_axPllCallbacks[CallbackIndex_16].Complete;
  _6 = Clock_Ip_aeHwPllName[Index_10];
  PllStatus_18 = _5 (_6);
  # DEBUG PllStatus => PllStatus_18
  # DEBUG BEGIN_STMT
  if (PllStatus_18 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  RetValue_21 = 1;
  # DEBUG RetValue => RetValue_21
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (PllStatus_18 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetValue_19 = 0;
  # DEBUG RetValue => RetValue_19

  <bb 7> :
  # RetValue_7 = PHI <RetValue_8(5), RetValue_19(6)>
  # DEBUG RetValue => RetValue_7
  # DEBUG BEGIN_STMT
  Index_20 = Index_10 + 1;
  # DEBUG Index => Index_20

  <bb 8> :
  # RetValue_8 = PHI <RetValue_13(2), RetValue_7(7)>
  # Index_10 = PHI <Index_14(2), Index_20(7)>
  # DEBUG Index => Index_10
  # DEBUG RetValue => RetValue_8
  # DEBUG BEGIN_STMT
  if (Index_10 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # RetValue_9 = PHI <RetValue_21(4), RetValue_8(8)>
  # DEBUG RetValue => RetValue_9
  # DEBUG BEGIN_STMT
  _22 = RetValue_9;
  return _22;

}


Clock_Ip_InitClock (const struct Clock_Ip_ClockConfigType * Config)
{
  uint32 Index;
  uint32 CallbackIndex;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.1_1;
  <unnamed type> _2;
  unsigned char _3;
  int _4;
  unsigned char _5;
  void (*<T6a6>) (const struct Clock_Ip_CmuConfigType *) _6;
  const struct Clock_Ip_CmuConfigType * _7;
  unsigned char _8;
  long unsigned int _9;
  <unnamed type> _10;
  unsigned char _11;
  int _12;
  unsigned char _13;
  void (*<T632>) (const struct Clock_Ip_IrcoscConfigType *) _14;
  const struct Clock_Ip_IrcoscConfigType * _15;
  unsigned char _16;
  long unsigned int _17;
  <unnamed type> _18;
  unsigned char _19;
  int _20;
  unsigned char _21;
  void (*<T641>) (const struct Clock_Ip_XoscConfigType *) _22;
  const struct Clock_Ip_XoscConfigType * _23;
  unsigned char _24;
  long unsigned int _25;
  <unnamed type> _26;
  unsigned char _27;
  int _28;
  unsigned char _29;
  void (*<T6b8>) (const struct Clock_Ip_PcfsConfigType *) _30;
  const struct Clock_Ip_PcfsConfigType * _31;
  unsigned char _32;
  long unsigned int _33;
  <unnamed type> _34;
  unsigned char _35;
  int _36;
  unsigned char _37;
  void (*<T65a>) (const struct Clock_Ip_DividerTriggerConfigType *) _38;
  const struct Clock_Ip_DividerTriggerConfigType * _39;
  unsigned char _40;
  long unsigned int _41;
  <unnamed type> _42;
  unsigned char _43;
  int _44;
  unsigned char _45;
  void (*<T64f>) (const struct Clock_Ip_DividerConfigType *) _46;
  const struct Clock_Ip_DividerConfigType * _47;
  unsigned char _48;
  long unsigned int _49;
  <unnamed type> _50;
  unsigned char _51;
  int _52;
  unsigned char _53;
  void (*<T65a>) (const struct Clock_Ip_DividerTriggerConfigType *) _54;
  const struct Clock_Ip_DividerTriggerConfigType * _55;
  unsigned char _56;
  long unsigned int _57;
  <unnamed type> _58;
  unsigned char _59;
  int _60;
  unsigned char _61;
  void (*<T677>) (const struct Clock_Ip_PllConfigType *) _62;
  const struct Clock_Ip_PllConfigType * _63;
  unsigned char _64;
  long unsigned int _65;
  <unnamed type> _66;
  unsigned char _67;
  int _68;
  unsigned char _69;
  void (*<T6a6>) (const struct Clock_Ip_CmuConfigType *) _70;
  const struct Clock_Ip_CmuConfigType * _71;
  unsigned char _72;
  long unsigned int _73;
  <unnamed type> _74;
  unsigned char _75;
  int _76;
  unsigned char _77;
  void (*<T641>) (const struct Clock_Ip_XoscConfigType *) _78;
  const struct Clock_Ip_XoscConfigType * _79;
  unsigned char _80;
  long unsigned int _81;
  <unnamed type> _82;
  unsigned char _83;
  int _84;
  unsigned char _85;
  void (*<T677>) (const struct Clock_Ip_PllConfigType *) _86;
  const struct Clock_Ip_PllConfigType * _87;
  unsigned char _88;
  long unsigned int _89;
  <unnamed type> _90;
  unsigned char _91;
  int _92;
  unsigned char _93;
  void (*<T666>) (const struct Clock_Ip_FracDivConfigType *) _94;
  const struct Clock_Ip_FracDivConfigType * _95;
  unsigned char _96;
  long unsigned int _97;
  void (*<T534>) (Clock_Ip_NotificationType, Clock_Ip_NameType) Clock_Ip_pfkNotificationsCallback.2_98;
  void (*<T534>) (Clock_Ip_NotificationType, Clock_Ip_NameType) Clock_Ip_pfkNotificationsCallback.3_99;
  void (*<T534>) (Clock_Ip_NotificationType, Clock_Ip_NameType) Clock_Ip_pfkNotificationsCallback.4_100;
  void (*<T534>) (Clock_Ip_NotificationType, Clock_Ip_NameType) Clock_Ip_pfkNotificationsCallback.5_101;
  <unnamed type> _102;
  <unnamed type> _103;
  <unnamed type> _104;
  unsigned char _105;
  int _106;
  unsigned char _107;
  void (*<T68a>) (const struct Clock_Ip_SelectorConfigType *) _108;
  const struct Clock_Ip_SelectorConfigType * _109;
  unsigned char _110;
  long unsigned int _111;
  _Bool Clock_Ip_bClockTreeIsConsumingPll.6_112;
  _Bool _113;
  <unnamed type> _114;
  unsigned char _115;
  int _116;
  unsigned char _117;
  void (*<T696>) (const struct Clock_Ip_GateConfigType *) _118;
  const struct Clock_Ip_GateConfigType * _119;
  unsigned char _120;
  long unsigned int _121;
  const struct Clock_IP_SpecificPeriphConfigType * _122;
  <unnamed type> _123;
  unsigned char _124;
  int _125;
  unsigned char _126;
  void (*<T6a6>) (const struct Clock_Ip_CmuConfigType *) _127;
  const struct Clock_Ip_CmuConfigType * _128;
  unsigned char _129;
  long unsigned int _130;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig = Config_165(D);
  # DEBUG BEGIN_STMT
  Clock_Ip_SpecificPlatformInitClock (Config_165(D));
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.1_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.1_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Index_168 = 0;
  # DEBUG Index => Index_168
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = Config_165(D)->Cmus[Index_131].Name;
  _3 = Clock_Ip_au8ClockFeatures[_2][1];
  _4 = (int) _3;
  _5 = Clock_Ip_au8CmuCallbackIndex[_4];
  CallbackIndex_169 = (uint32) _5;
  # DEBUG CallbackIndex => CallbackIndex_169
  # DEBUG BEGIN_STMT
  _6 = Clock_Ip_axCmuCallbacks[CallbackIndex_169].Reset;
  _7 = &Config_165(D)->Cmus[Index_131];
  _6 (_7);
  # DEBUG BEGIN_STMT
  Index_171 = Index_131 + 1;
  # DEBUG Index => Index_171

  <bb 5> :
  # Index_131 = PHI <Index_168(3), Index_171(4)>
  # DEBUG Index => Index_131
  # DEBUG BEGIN_STMT
  _8 = Config_165(D)->CmusCount;
  _9 = (long unsigned int) _8;
  if (Index_131 < _9)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ResetClockConfiguration (Config_165(D));
  # DEBUG BEGIN_STMT
  Index_173 = 0;
  # DEBUG Index => Index_173
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = Config_165(D)->Ircoscs[Index_132].Name;
  _11 = Clock_Ip_au8ClockFeatures[_10][1];
  _12 = (int) _11;
  _13 = Clock_Ip_au8IrcoscCallbackIndex[_12];
  CallbackIndex_236 = (uint32) _13;
  # DEBUG CallbackIndex => CallbackIndex_236
  # DEBUG BEGIN_STMT
  _14 = Clock_Ip_axIntOscCallbacks[CallbackIndex_236].Set;
  _15 = &Config_165(D)->Ircoscs[Index_132];
  _14 (_15);
  # DEBUG BEGIN_STMT
  Index_238 = Index_132 + 1;
  # DEBUG Index => Index_238

  <bb 8> :
  # Index_132 = PHI <Index_173(6), Index_238(7)>
  # DEBUG Index => Index_132
  # DEBUG BEGIN_STMT
  _16 = Config_165(D)->IrcoscsCount;
  _17 = (long unsigned int) _16;
  if (Index_132 < _17)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Index_174 = 0;
  # DEBUG Index => Index_174
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _18 = Config_165(D)->Xoscs[Index_133].Name;
  _19 = Clock_Ip_au8ClockFeatures[_18][1];
  _20 = (int) _19;
  _21 = Clock_Ip_au8XoscCallbackIndex[_20];
  CallbackIndex_233 = (uint32) _21;
  # DEBUG CallbackIndex => CallbackIndex_233
  # DEBUG BEGIN_STMT
  _22 = Clock_Ip_axExtOscCallbacks[CallbackIndex_233].Set;
  _23 = &Config_165(D)->Xoscs[Index_133];
  _22 (_23);
  # DEBUG BEGIN_STMT
  Index_235 = Index_133 + 1;
  # DEBUG Index => Index_235

  <bb 11> :
  # Index_133 = PHI <Index_174(9), Index_235(10)>
  # DEBUG Index => Index_133
  # DEBUG BEGIN_STMT
  _24 = Config_165(D)->XoscsCount;
  _25 = (long unsigned int) _24;
  if (Index_133 < _25)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Clock_Ip_UpdateDriverContext (Config_165(D));
  # DEBUG BEGIN_STMT
  Index_176 = 0;
  # DEBUG Index => Index_176
  goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _26 = Config_165(D)->Pcfs[Index_134].Name;
  _27 = Clock_Ip_au8ClockFeatures[_26][1];
  _28 = (int) _27;
  _29 = Clock_Ip_au8PcfsCallbackIndex[_28];
  CallbackIndex_230 = (uint32) _29;
  # DEBUG CallbackIndex => CallbackIndex_230
  # DEBUG BEGIN_STMT
  _30 = Clock_Ip_axPcfsCallbacks[CallbackIndex_230].Set;
  _31 = &Config_165(D)->Pcfs[Index_134];
  _30 (_31);
  # DEBUG BEGIN_STMT
  Index_232 = Index_134 + 1;
  # DEBUG Index => Index_232

  <bb 14> :
  # Index_134 = PHI <Index_176(12), Index_232(13)>
  # DEBUG Index => Index_134
  # DEBUG BEGIN_STMT
  _32 = Config_165(D)->PcfsCount;
  _33 = (long unsigned int) _32;
  if (Index_134 < _33)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  Index_177 = 0;
  # DEBUG Index => Index_177
  goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _34 = Config_165(D)->DividerTriggers[Index_135].Name;
  _35 = Clock_Ip_au8ClockFeatures[_34][1];
  _36 = (int) _35;
  _37 = Clock_Ip_au8DividerTriggerCallbackIndex[_36];
  CallbackIndex_227 = (uint32) _37;
  # DEBUG CallbackIndex => CallbackIndex_227
  # DEBUG BEGIN_STMT
  _38 = Clock_Ip_axDividerTriggerCallbacks[CallbackIndex_227].Configure;
  _39 = &Config_165(D)->DividerTriggers[Index_135];
  _38 (_39);
  # DEBUG BEGIN_STMT
  Index_229 = Index_135 + 1;
  # DEBUG Index => Index_229

  <bb 17> :
  # Index_135 = PHI <Index_177(15), Index_229(16)>
  # DEBUG Index => Index_135
  # DEBUG BEGIN_STMT
  _40 = Config_165(D)->DividerTriggersCount;
  _41 = (long unsigned int) _40;
  if (Index_135 < _41)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  Index_178 = 0;
  # DEBUG Index => Index_178
  goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _42 = Config_165(D)->Dividers[Index_136].Name;
  _43 = Clock_Ip_au8ClockFeatures[_42][1];
  _44 = (int) _43;
  _45 = Clock_Ip_au8DividerCallbackIndex[_44];
  CallbackIndex_224 = (uint32) _45;
  # DEBUG CallbackIndex => CallbackIndex_224
  # DEBUG BEGIN_STMT
  _46 = Clock_Ip_axDividerCallbacks[CallbackIndex_224].Set;
  _47 = &Config_165(D)->Dividers[Index_136];
  _46 (_47);
  # DEBUG BEGIN_STMT
  Index_226 = Index_136 + 1;
  # DEBUG Index => Index_226

  <bb 20> :
  # Index_136 = PHI <Index_178(18), Index_226(19)>
  # DEBUG Index => Index_136
  # DEBUG BEGIN_STMT
  _48 = Config_165(D)->DividersCount;
  _49 = (long unsigned int) _48;
  if (Index_136 < _49)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  Index_179 = 0;
  # DEBUG Index => Index_179
  goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _50 = Config_165(D)->DividerTriggers[Index_137].Name;
  _51 = Clock_Ip_au8ClockFeatures[_50][1];
  _52 = (int) _51;
  _53 = Clock_Ip_au8DividerTriggerCallbackIndex[_52];
  CallbackIndex_221 = (uint32) _53;
  # DEBUG CallbackIndex => CallbackIndex_221
  # DEBUG BEGIN_STMT
  _54 = Clock_Ip_axDividerTriggerCallbacks[CallbackIndex_221].TriggerUpdate;
  _55 = &Config_165(D)->DividerTriggers[Index_137];
  _54 (_55);
  # DEBUG BEGIN_STMT
  Index_223 = Index_137 + 1;
  # DEBUG Index => Index_223

  <bb 23> :
  # Index_137 = PHI <Index_179(21), Index_223(22)>
  # DEBUG Index => Index_137
  # DEBUG BEGIN_STMT
  _56 = Config_165(D)->DividerTriggersCount;
  _57 = (long unsigned int) _56;
  if (Index_137 < _57)
    goto <bb 22>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  Index_180 = 0;
  # DEBUG Index => Index_180
  goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  _58 = Config_165(D)->Plls[Index_138].Name;
  _59 = Clock_Ip_au8ClockFeatures[_58][1];
  _60 = (int) _59;
  _61 = Clock_Ip_au8PllCallbackIndex[_60];
  CallbackIndex_218 = (uint32) _61;
  # DEBUG CallbackIndex => CallbackIndex_218
  # DEBUG BEGIN_STMT
  _62 = Clock_Ip_axPllCallbacks[CallbackIndex_218].Set;
  _63 = &Config_165(D)->Plls[Index_138];
  _62 (_63);
  # DEBUG BEGIN_STMT
  Index_220 = Index_138 + 1;
  # DEBUG Index => Index_220

  <bb 26> :
  # Index_138 = PHI <Index_180(24), Index_220(25)>
  # DEBUG Index => Index_138
  # DEBUG BEGIN_STMT
  _64 = Config_165(D)->PllsCount;
  _65 = (long unsigned int) _64;
  if (Index_138 < _65)
    goto <bb 25>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  # DEBUG BEGIN_STMT
  Index_181 = 0;
  # DEBUG Index => Index_181
  goto <bb 29>; [INV]

  <bb 28> :
  # DEBUG BEGIN_STMT
  _66 = Config_165(D)->Cmus[Index_139].Name;
  _67 = Clock_Ip_au8ClockFeatures[_66][1];
  _68 = (int) _67;
  _69 = Clock_Ip_au8CmuCallbackIndex[_68];
  CallbackIndex_215 = (uint32) _69;
  # DEBUG CallbackIndex => CallbackIndex_215
  # DEBUG BEGIN_STMT
  _70 = Clock_Ip_axCmuCallbacks[CallbackIndex_215].Set;
  _71 = &Config_165(D)->Cmus[Index_139];
  _70 (_71);
  # DEBUG BEGIN_STMT
  Index_217 = Index_139 + 1;
  # DEBUG Index => Index_217

  <bb 29> :
  # Index_139 = PHI <Index_181(27), Index_217(28)>
  # DEBUG Index => Index_139
  # DEBUG BEGIN_STMT
  _72 = Config_165(D)->CmusCount;
  _73 = (long unsigned int) _72;
  if (Index_139 < _73)
    goto <bb 28>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  Index_182 = 0;
  # DEBUG Index => Index_182
  goto <bb 32>; [INV]

  <bb 31> :
  # DEBUG BEGIN_STMT
  _74 = Config_165(D)->Xoscs[Index_140].Name;
  _75 = Clock_Ip_au8ClockFeatures[_74][1];
  _76 = (int) _75;
  _77 = Clock_Ip_au8XoscCallbackIndex[_76];
  CallbackIndex_212 = (uint32) _77;
  # DEBUG CallbackIndex => CallbackIndex_212
  # DEBUG BEGIN_STMT
  _78 = Clock_Ip_axExtOscCallbacks[CallbackIndex_212].Complete;
  _79 = &Config_165(D)->Xoscs[Index_140];
  _78 (_79);
  # DEBUG BEGIN_STMT
  Index_214 = Index_140 + 1;
  # DEBUG Index => Index_214

  <bb 32> :
  # Index_140 = PHI <Index_182(30), Index_214(31)>
  # DEBUG Index => Index_140
  # DEBUG BEGIN_STMT
  _80 = Config_165(D)->XoscsCount;
  _81 = (long unsigned int) _80;
  if (Index_140 < _81)
    goto <bb 31>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 33> :
  # DEBUG BEGIN_STMT
  Index_183 = 0;
  # DEBUG Index => Index_183
  goto <bb 35>; [INV]

  <bb 34> :
  # DEBUG BEGIN_STMT
  _82 = Config_165(D)->Plls[Index_141].Name;
  _83 = Clock_Ip_au8ClockFeatures[_82][1];
  _84 = (int) _83;
  _85 = Clock_Ip_au8PllCallbackIndex[_84];
  CallbackIndex_209 = (uint32) _85;
  # DEBUG CallbackIndex => CallbackIndex_209
  # DEBUG BEGIN_STMT
  _86 = Clock_Ip_axPllCallbacks[CallbackIndex_209].Enable;
  _87 = &Config_165(D)->Plls[Index_141];
  _86 (_87);
  # DEBUG BEGIN_STMT
  Index_211 = Index_141 + 1;
  # DEBUG Index => Index_211

  <bb 35> :
  # Index_141 = PHI <Index_183(33), Index_211(34)>
  # DEBUG Index => Index_141
  # DEBUG BEGIN_STMT
  _88 = Config_165(D)->PllsCount;
  _89 = (long unsigned int) _88;
  if (Index_141 < _89)
    goto <bb 34>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 36> :
  # DEBUG BEGIN_STMT
  Index_184 = 0;
  # DEBUG Index => Index_184
  goto <bb 38>; [INV]

  <bb 37> :
  # DEBUG BEGIN_STMT
  _90 = Config_165(D)->FracDivs[Index_142].Name;
  _91 = Clock_Ip_au8ClockFeatures[_90][1];
  _92 = (int) _91;
  _93 = Clock_Ip_au8FractionalDividerCallbackIndex[_92];
  CallbackIndex_206 = (uint32) _93;
  # DEBUG CallbackIndex => CallbackIndex_206
  # DEBUG BEGIN_STMT
  _94 = Clock_Ip_axFracDivCallbacks[CallbackIndex_206].Set;
  _95 = &Config_165(D)->FracDivs[Index_142];
  _94 (_95);
  # DEBUG BEGIN_STMT
  Index_208 = Index_142 + 1;
  # DEBUG Index => Index_208

  <bb 38> :
  # Index_142 = PHI <Index_184(36), Index_208(37)>
  # DEBUG Index => Index_142
  # DEBUG BEGIN_STMT
  _96 = Config_165(D)->FracDivsCount;
  _97 = (long unsigned int) _96;
  if (Index_142 < _97)
    goto <bb 37>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 39> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback.2_98 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.2_98 (4, 145);
  # DEBUG BEGIN_STMT
  Clock_Ip_SetRamWaitStates ();
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback.3_99 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.3_99 (5, 145);
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback.4_100 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.4_100 (6, 145);
  # DEBUG BEGIN_STMT
  Clock_Ip_SetFlashWaitStates ();
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback.5_101 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.5_101 (7, 145);
  # DEBUG BEGIN_STMT
  Clock_Ip_bClockTreeIsConsumingPll = 0;
  # DEBUG BEGIN_STMT
  Index_192 = 0;
  # DEBUG Index => Index_192
  goto <bb 44>; [INV]

  <bb 40> :
  # DEBUG BEGIN_STMT
  _102 = Config_165(D)->Selectors[Index_143].Value;
  _103 = Clock_Ip_aeSourceTypeClockName[_102];
  if (_103 != 3)
    goto <bb 41>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 41> :
  # DEBUG BEGIN_STMT
  _104 = Config_165(D)->Selectors[Index_143].Name;
  _105 = Clock_Ip_au8ClockFeatures[_104][1];
  _106 = (int) _105;
  _107 = Clock_Ip_au8SelectorCallbackIndex[_106];
  CallbackIndex_203 = (uint32) _107;
  # DEBUG CallbackIndex => CallbackIndex_203
  # DEBUG BEGIN_STMT
  _108 = Clock_Ip_axSelectorCallbacks[CallbackIndex_203].Set;
  _109 = &Config_165(D)->Selectors[Index_143];
  _108 (_109);
  goto <bb 43>; [INV]

  <bb 42> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bClockTreeIsConsumingPll = 1;

  <bb 43> :
  # DEBUG BEGIN_STMT
  Index_205 = Index_143 + 1;
  # DEBUG Index => Index_205

  <bb 44> :
  # Index_143 = PHI <Index_192(39), Index_205(43)>
  # DEBUG Index => Index_143
  # DEBUG BEGIN_STMT
  _110 = Config_165(D)->SelectorsCount;
  _111 = (long unsigned int) _110;
  if (Index_143 < _111)
    goto <bb 40>; [INV]
  else
    goto <bb 45>; [INV]

  <bb 45> :
  # DEBUG BEGIN_STMT
  Clock_Ip_bClockTreeIsConsumingPll.6_112 = Clock_Ip_bClockTreeIsConsumingPll;
  _113 = ~Clock_Ip_bClockTreeIsConsumingPll.6_112;
  if (_113 != 0)
    goto <bb 46>; [INV]
  else
    goto <bb 52>; [INV]

  <bb 46> :
  # DEBUG BEGIN_STMT
  Index_193 = 0;
  # DEBUG Index => Index_193
  goto <bb 48>; [INV]

  <bb 47> :
  # DEBUG BEGIN_STMT
  _114 = Config_165(D)->Gates[Index_144].Name;
  _115 = Clock_Ip_au8ClockFeatures[_114][1];
  _116 = (int) _115;
  _117 = Clock_Ip_au8GateCallbackIndex[_116];
  CallbackIndex_199 = (uint32) _117;
  # DEBUG CallbackIndex => CallbackIndex_199
  # DEBUG BEGIN_STMT
  _118 = Clock_Ip_axGateCallbacks[CallbackIndex_199].Set;
  _119 = &Config_165(D)->Gates[Index_144];
  _118 (_119);
  # DEBUG BEGIN_STMT
  Index_201 = Index_144 + 1;
  # DEBUG Index => Index_201

  <bb 48> :
  # Index_144 = PHI <Index_193(46), Index_201(47)>
  # DEBUG Index => Index_144
  # DEBUG BEGIN_STMT
  _120 = Config_165(D)->GatesCount;
  _121 = (long unsigned int) _120;
  if (Index_144 < _121)
    goto <bb 47>; [INV]
  else
    goto <bb 49>; [INV]

  <bb 49> :
  # DEBUG BEGIN_STMT
  _122 = &Config_165(D)->SpecificPeriphalConfiguration;
  Clock_Ip_SpecificPeripheralClockInitialization (_122);
  # DEBUG BEGIN_STMT
  Index_195 = 0;
  # DEBUG Index => Index_195
  goto <bb 51>; [INV]

  <bb 50> :
  # DEBUG BEGIN_STMT
  _123 = Config_165(D)->Cmus[Index_145].Name;
  _124 = Clock_Ip_au8ClockFeatures[_123][1];
  _125 = (int) _124;
  _126 = Clock_Ip_au8CmuCallbackIndex[_125];
  CallbackIndex_196 = (uint32) _126;
  # DEBUG CallbackIndex => CallbackIndex_196
  # DEBUG BEGIN_STMT
  _127 = Clock_Ip_axCmuCallbacks[CallbackIndex_196].Enable;
  _128 = &Config_165(D)->Cmus[Index_145];
  _127 (_128);
  # DEBUG BEGIN_STMT
  Index_198 = Index_145 + 1;
  # DEBUG Index => Index_198

  <bb 51> :
  # Index_145 = PHI <Index_195(49), Index_198(50)>
  # DEBUG Index => Index_145
  # DEBUG BEGIN_STMT
  _129 = Config_165(D)->CmusCount;
  _130 = (long unsigned int) _129;
  if (Index_145 < _130)
    goto <bb 50>; [INV]
  else
    goto <bb 52>; [INV]

  <bb 52> :
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_Init (const struct Clock_Ip_ClockConfigType * Config)
{
  Clock_Ip_PllStatusType PllStatus;
  Clock_Ip_StatusType ClockStatus;
  _Bool Clock_Ip_bClockTreeIsConsumingPll.0_1;
  Clock_Ip_StatusType _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ClockStatus_4 = 1;
  # DEBUG ClockStatus => ClockStatus_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_InitClock (Config_6(D));
  # DEBUG BEGIN_STMT
  Clock_Ip_bClockTreeIsConsumingPll.0_1 = Clock_Ip_bClockTreeIsConsumingPll;
  if (Clock_Ip_bClockTreeIsConsumingPll.0_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  PllStatus_10 = Clock_Ip_GetPllStatus ();
  # DEBUG PllStatus => PllStatus_10
  # DEBUG BEGIN_STMT
  if (PllStatus_10 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_DistributePll ();
  # DEBUG BEGIN_STMT
  ClockStatus_12 = 0;
  # DEBUG ClockStatus => ClockStatus_12
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  ClockStatus_8 = 0;
  # DEBUG ClockStatus => ClockStatus_8

  <bb 6> :
  # ClockStatus_2 = PHI <ClockStatus_12(4), ClockStatus_8(5), ClockStatus_4(3)>
  # DEBUG ClockStatus => ClockStatus_2
  # DEBUG BEGIN_STMT
  _13 = ClockStatus_2;
  return _13;

}


Clock_Ip_ResetClockConfiguration (const struct Clock_Ip_ClockConfigType * Config)
{
  uint32 Index;
  uint32 CallbackIndex;
  unsigned char _1;
  long unsigned int _2;
  <unnamed type> _3;
  unsigned char _4;
  int _5;
  unsigned char _6;
  void (*<T68a>) (const struct Clock_Ip_SelectorConfigType *) _7;
  long unsigned int _8;
  const struct Clock_Ip_SelectorConfigType * _9;
  unsigned char _10;
  long unsigned int _11;
  <unnamed type> _12;
  unsigned char _13;
  int _14;
  unsigned char _15;
  void (*<T666>) (const struct Clock_Ip_FracDivConfigType *) _16;
  long unsigned int _17;
  const struct Clock_Ip_FracDivConfigType * _18;
  unsigned char _19;
  long unsigned int _20;
  <unnamed type> _21;
  unsigned char _22;
  int _23;
  unsigned char _24;
  void (*<T677>) (const struct Clock_Ip_PllConfigType *) _25;
  long unsigned int _26;
  const struct Clock_Ip_PllConfigType * _27;
  unsigned char _28;
  long unsigned int _29;
  <unnamed type> _30;
  unsigned char _31;
  int _32;
  unsigned char _33;
  void (*<T641>) (const struct Clock_Ip_XoscConfigType *) _34;
  long unsigned int _35;
  const struct Clock_Ip_XoscConfigType * _36;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Config_46(D)->SelectorsCount;
  Index_47 = (uint32) _1;
  # DEBUG Index => Index_47
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Index_37 + 4294967295;
  _3 = Config_46(D)->Selectors[_2].Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][1];
  _5 = (int) _4;
  _6 = Clock_Ip_au8SelectorCallbackIndex[_5];
  CallbackIndex_60 = (uint32) _6;
  # DEBUG CallbackIndex => CallbackIndex_60
  # DEBUG BEGIN_STMT
  _7 = Clock_Ip_axSelectorCallbacks[CallbackIndex_60].Reset;
  _8 = Index_37 + 4294967295;
  _9 = &Config_46(D)->Selectors[_8];
  _7 (_9);
  # DEBUG BEGIN_STMT
  Index_62 = Index_37 + 4294967295;
  # DEBUG Index => Index_62

  <bb 4> :
  # Index_37 = PHI <Index_47(2), Index_62(3)>
  # DEBUG Index => Index_37
  # DEBUG BEGIN_STMT
  if (Index_37 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _10 = Config_46(D)->FracDivsCount;
  Index_48 = (uint32) _10;
  # DEBUG Index => Index_48
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _11 = Index_38 + 4294967295;
  _12 = Config_46(D)->FracDivs[_11].Name;
  _13 = Clock_Ip_au8ClockFeatures[_12][1];
  _14 = (int) _13;
  _15 = Clock_Ip_au8FractionalDividerCallbackIndex[_14];
  CallbackIndex_57 = (uint32) _15;
  # DEBUG CallbackIndex => CallbackIndex_57
  # DEBUG BEGIN_STMT
  _16 = Clock_Ip_axFracDivCallbacks[CallbackIndex_57].Reset;
  _17 = Index_38 + 4294967295;
  _18 = &Config_46(D)->FracDivs[_17];
  _16 (_18);
  # DEBUG BEGIN_STMT
  Index_59 = Index_38 + 4294967295;
  # DEBUG Index => Index_59

  <bb 7> :
  # Index_38 = PHI <Index_48(5), Index_59(6)>
  # DEBUG Index => Index_38
  # DEBUG BEGIN_STMT
  if (Index_38 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _19 = Config_46(D)->PllsCount;
  Index_49 = (uint32) _19;
  # DEBUG Index => Index_49
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _20 = Index_39 + 4294967295;
  _21 = Config_46(D)->Plls[_20].Name;
  _22 = Clock_Ip_au8ClockFeatures[_21][1];
  _23 = (int) _22;
  _24 = Clock_Ip_au8PllCallbackIndex[_23];
  CallbackIndex_54 = (uint32) _24;
  # DEBUG CallbackIndex => CallbackIndex_54
  # DEBUG BEGIN_STMT
  _25 = Clock_Ip_axPllCallbacks[CallbackIndex_54].Reset;
  _26 = Index_39 + 4294967295;
  _27 = &Config_46(D)->Plls[_26];
  _25 (_27);
  # DEBUG BEGIN_STMT
  Index_56 = Index_39 + 4294967295;
  # DEBUG Index => Index_56

  <bb 10> :
  # Index_39 = PHI <Index_49(8), Index_56(9)>
  # DEBUG Index => Index_39
  # DEBUG BEGIN_STMT
  if (Index_39 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _28 = Config_46(D)->XoscsCount;
  Index_50 = (uint32) _28;
  # DEBUG Index => Index_50
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _29 = Index_40 + 4294967295;
  _30 = Config_46(D)->Xoscs[_29].Name;
  _31 = Clock_Ip_au8ClockFeatures[_30][1];
  _32 = (int) _31;
  _33 = Clock_Ip_au8XoscCallbackIndex[_32];
  CallbackIndex_51 = (uint32) _33;
  # DEBUG CallbackIndex => CallbackIndex_51
  # DEBUG BEGIN_STMT
  _34 = Clock_Ip_axExtOscCallbacks[CallbackIndex_51].Reset;
  _35 = Index_40 + 4294967295;
  _36 = &Config_46(D)->Xoscs[_35];
  _34 (_36);
  # DEBUG BEGIN_STMT
  Index_53 = Index_40 + 4294967295;
  # DEBUG Index => Index_53

  <bb 13> :
  # Index_40 = PHI <Index_50(11), Index_53(12)>
  # DEBUG Index => Index_40
  # DEBUG BEGIN_STMT
  if (Index_40 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  return;

}


Clock_Ip_CallEmptyCallbacks ()
{
  static boolean FunctionWasCalled = 0;
  _Bool FunctionWasCalled.8_1;
  _Bool _2;
  void (*<T6a6>) (const struct Clock_Ip_CmuConfigType *) _3;
  void (*<T635>) (Clock_Ip_NameType) _4;
  void (*<T635>) (Clock_Ip_NameType) _5;
  Clock_Ip_CmuStatusType (*<T6ac>) (Clock_Ip_NameType) _6;
  void (*<T64f>) (const struct Clock_Ip_DividerConfigType *) _7;
  void (*<T65a>) (const struct Clock_Ip_DividerTriggerConfigType *) _8;
  void (*<T641>) (const struct Clock_Ip_XoscConfigType *) _9;
  void (*<T666>) (const struct Clock_Ip_FracDivConfigType *) _10;
  Clock_Ip_DfsStatusType (*<T66c>) (Clock_Ip_NameType) _11;
  void (*<T696>) (const struct Clock_Ip_GateConfigType *) _12;
  void (*<T69b>) (Clock_Ip_NameType, boolean) _13;
  void (*<T632>) (const struct Clock_Ip_IrcoscConfigType *) _14;
  void (*<T677>) (const struct Clock_Ip_PllConfigType *) _15;
  Clock_Ip_PllStatusReturnType (*<T67d>) (Clock_Ip_NameType) _16;
  void (*<T68a>) (const struct Clock_Ip_SelectorConfigType *) _17;
  void (*<T6b8>) (const struct Clock_Ip_PcfsConfigType *) _18;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FunctionWasCalled.8_1 = FunctionWasCalled;
  _2 = ~FunctionWasCalled.8_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FunctionWasCalled = 1;
  # DEBUG BEGIN_STMT
  _3 = Clock_Ip_axCmuCallbacks[0].Set;
  _3 (0B);
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_axCmuCallbacks[0].Disable;
  _4 (145);
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_axCmuCallbacks[0].Clear;
  _5 (145);
  # DEBUG BEGIN_STMT
  _6 = Clock_Ip_axCmuCallbacks[0].GetStatus;
  _6 (145);
  # DEBUG BEGIN_STMT
  _7 = Clock_Ip_axDividerCallbacks[0].Set;
  _7 (0B);
  # DEBUG BEGIN_STMT
  _8 = Clock_Ip_axDividerTriggerCallbacks[0].Configure;
  _8 (0B);
  # DEBUG BEGIN_STMT
  _9 = Clock_Ip_axExtOscCallbacks[0].Reset;
  _9 (0B);
  # DEBUG BEGIN_STMT
  _10 = Clock_Ip_axFracDivCallbacks[0].Set;
  _10 (0B);
  # DEBUG BEGIN_STMT
  _11 = Clock_Ip_axFracDivCallbacks[0].Complete;
  _11 (145);
  # DEBUG BEGIN_STMT
  _12 = Clock_Ip_axGateCallbacks[0].Set;
  _12 (0B);
  # DEBUG BEGIN_STMT
  _13 = Clock_Ip_axGateCallbacks[0].Update;
  _13 (145, 0);
  # DEBUG BEGIN_STMT
  _14 = Clock_Ip_axIntOscCallbacks[0].Set;
  _14 (0B);
  # DEBUG BEGIN_STMT
  _15 = Clock_Ip_axPllCallbacks[0].Set;
  _15 (0B);
  # DEBUG BEGIN_STMT
  _16 = Clock_Ip_axPllCallbacks[0].Complete;
  _16 (145);
  # DEBUG BEGIN_STMT
  _17 = Clock_Ip_axSelectorCallbacks[0].Set;
  _17 (0B);
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_axPcfsCallbacks[0].Set;
  _18 (0B);

  <bb 4> :
  return;

}


Clock_Ip_UpdateDriverContext (const struct Clock_Ip_ClockConfigType * Config)
{
  _Bool Clock_Ip_bObjectsAreInitialized.7_1;
  _Bool _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized.7_1 = Clock_Ip_bObjectsAreInitialized;
  _2 = ~Clock_Ip_bObjectsAreInitialized.7_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ClockInitializeObjects ();
  # DEBUG BEGIN_STMT
  Clock_Ip_bObjectsAreInitialized = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_CallEmptyCallbacks ();
  return;

}


Clock_Ip_NotificatonsEmptyCallback (Clock_Ip_NotificationType Notification, Clock_Ip_NameType ClockName)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


