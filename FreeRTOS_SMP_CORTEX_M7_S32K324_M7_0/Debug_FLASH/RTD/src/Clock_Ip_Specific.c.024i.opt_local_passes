Clock_Ip_PRAMCSetRamIWS ()
{
  uint32 ConfiguredAipsPlatClock;
  uint32 ConfiguredCoreClock;
  struct PRAMC_Type * _1;
  long unsigned int _2;
  struct PRAMC_Type * _3;
  long unsigned int _4;
  struct PRAMC_Type * _5;
  long unsigned int _6;
  struct PRAMC_Type * _7;
  long unsigned int _8;
  struct PRAMC_Type * _9;
  long unsigned int _10;
  struct PRAMC_Type * _11;
  long unsigned int _12;
  struct PRAMC_Type * _13;
  long unsigned int _14;
  struct PRAMC_Type * _15;
  long unsigned int _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ConfiguredCoreClock_18 = 0;
  # DEBUG ConfiguredCoreClock => ConfiguredCoreClock_18
  # DEBUG BEGIN_STMT
  ConfiguredAipsPlatClock_19 = 0;
  # DEBUG ConfiguredAipsPlatClock => ConfiguredAipsPlatClock_19
  # DEBUG BEGIN_STMT
  ConfiguredCoreClock_22 = Clock_Ip_GetConfiguredFrequencyValue (13);
  # DEBUG ConfiguredCoreClock => ConfiguredCoreClock_22
  # DEBUG BEGIN_STMT
  ConfiguredAipsPlatClock_24 = Clock_Ip_GetConfiguredFrequencyValue (14);
  # DEBUG ConfiguredAipsPlatClock => ConfiguredAipsPlatClock_24
  # DEBUG BEGIN_STMT
  if (ConfiguredCoreClock_22 > 80000000)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (ConfiguredCoreClock_22 == ConfiguredAipsPlatClock_24)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = 1076248576B;
  _2 ={v} _1->PRCR1;
  _3 = 1076248576B;
  _4 = _2 | 1;
  _3->PRCR1 ={v} _4;
  # DEBUG BEGIN_STMT
  _5 = 1078345728B;
  _6 ={v} _5->PRCR1;
  _7 = 1078345728B;
  _8 = _6 | 1;
  _7->PRCR1 ={v} _8;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = 1076248576B;
  _10 ={v} _9->PRCR1;
  _11 = 1076248576B;
  _12 = _10 & 4294967294;
  _11->PRCR1 ={v} _12;
  # DEBUG BEGIN_STMT
  _13 = 1078345728B;
  _14 ={v} _13->PRCR1;
  _15 = 1078345728B;
  _16 = _14 & 4294967294;
  _15->PRCR1 ={v} _16;

  <bb 6> :
  return;

}


Clock_Ip_FLASH_SetFlashIWS ()
{
  void (*<T725>) (void) Clock_Ip_SetFlashWaitStatesCallback.8_1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Clock_Ip_SetFlashWaitStatesCallback.8_1 = Clock_Ip_SetFlashWaitStatesCallback;
  Clock_Ip_SetFlashWaitStatesCallback.8_1 ();
  return;

}


Clock_Ip_ClockPowerModeChangeNotification (Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_ClockInitializeObjects ()
{
  unsigned char _1;
  int _2;
  const struct Clock_Ip_IntOscCallbackType * _3;
  unsigned char _4;
  int _5;
  const struct Clock_Ip_IntOscCallbackType * _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8IrcoscCallbackIndex[2];
  _2 = (int) _1;
  _3 = &Clock_Ip_axIntOscCallbacks[_2];
  Clock_Ip_pxSircStdbyClock = _3;
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_au8IrcoscCallbackIndex[1];
  _5 = (int) _4;
  _6 = &Clock_Ip_axIntOscCallbacks[_5];
  Clock_Ip_pxFircStdbyClock = _6;
  return;

}


EnableSircInStandbyMode ()
{
  struct Clock_Ip_IrcoscConfigType SircConfig;
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxSircStdbyClock.7_1;
  void (*<T632>) (const struct Clock_Ip_IrcoscConfigType *) _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SircConfig.Enable = 1;
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSircStdbyClock.7_1 = Clock_Ip_pxSircStdbyClock;
  _2 = Clock_Ip_pxSircStdbyClock.7_1->Enable;
  _2 (&SircConfig);
  SircConfig ={v} {CLOBBER};
  return;

}


DisableSircInStandbyMode ()
{
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxSircStdbyClock.6_1;
  void (*<T635>) (Clock_Ip_NameType) _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxSircStdbyClock.6_1 = Clock_Ip_pxSircStdbyClock;
  _2 = Clock_Ip_pxSircStdbyClock.6_1->Disable;
  _2 (2);
  return;

}


EnableFircInStandbyMode ()
{
  struct Clock_Ip_IrcoscConfigType FircConfig;
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxFircStdbyClock.5_1;
  void (*<T632>) (const struct Clock_Ip_IrcoscConfigType *) _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FircConfig.Enable = 1;
  # DEBUG BEGIN_STMT
  Clock_Ip_pxFircStdbyClock.5_1 = Clock_Ip_pxFircStdbyClock;
  _2 = Clock_Ip_pxFircStdbyClock.5_1->Enable;
  _2 (&FircConfig);
  FircConfig ={v} {CLOBBER};
  return;

}


DisableFircInStandbyMode ()
{
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxFircStdbyClock.4_1;
  void (*<T635>) (Clock_Ip_NameType) _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxFircStdbyClock.4_1 = Clock_Ip_pxFircStdbyClock;
  _2 = Clock_Ip_pxFircStdbyClock.4_1->Disable;
  _2 (0);
  return;

}


Clock_Ip_SpecificPlatformInitClock (const struct Clock_Ip_ClockConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_PowerClockIpModules ();
  return;

}


Clock_Ip_SpecificPeripheralClockInitialization (const struct Clock_IP_SpecificPeriphConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_McMeEnterKey ()
{
  struct MC_ME_Type * _1;
  struct MC_ME_Type * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = 1076740096B;
  _1->CTL_KEY ={v} 23280;
  # DEBUG BEGIN_STMT
  _2 = 1076740096B;
  _2->CTL_KEY ={v} 42255;
  return;

}


Clock_Ip_SetFlashWaitStates ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Clock_Ip_FLASH_SetFlashIWS ();
  return;

}


Clock_Ip_SetRamWaitStates ()
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Clock_Ip_PRAMCSetRamIWS ();
  return;

}


Clock_Ip_CodeInRamSetFlashWaitStates ()
{
  uint8 Index;
  uint32 ConfiguredCoreClock;
  uint32 RwscSetting;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.9_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.10_2;
  int _3;
  <unnamed type> _4;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.11_5;
  int _6;
  unsigned char Index.12_7;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.13_8;
  unsigned char _9;
  struct FLASH_Type * _10;
  long unsigned int _11;
  struct FLASH_Type * _12;
  long unsigned int _13;
  struct FLASH_Type * _14;
  long unsigned int _15;
  struct FLASH_Type * _16;
  long unsigned int _17;
  struct FLASH_Type * _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  struct FLASH_Type * _22;
  long unsigned int _23;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RwscSetting_27 = 0;
  # DEBUG RwscSetting => RwscSetting_27
  # DEBUG BEGIN_STMT
  ConfiguredCoreClock_28 = 0;
  # DEBUG ConfiguredCoreClock => ConfiguredCoreClock_28
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.9_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.9_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Index_30 = 0;
  # DEBUG Index => Index_30
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.10_2 = Clock_Ip_pxConfig;
  _3 = (int) Index_26;
  _4 = Clock_Ip_pxConfig.10_2->ConfiguredFrequencies[_3].Name;
  if (_4 == 13)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.11_5 = Clock_Ip_pxConfig;
  _6 = (int) Index_26;
  ConfiguredCoreClock_32 = Clock_Ip_pxConfig.11_5->ConfiguredFrequencies[_6].ConfiguredFrequencyValue;
  # DEBUG ConfiguredCoreClock => ConfiguredCoreClock_32
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Index.12_7 = Index_26;
  Index_31 = Index.12_7 + 1;
  # DEBUG Index => Index_31

  <bb 7> :
  # Index_26 = PHI <Index_30(3), Index_31(6)>
  # DEBUG Index => Index_26
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.13_8 = Clock_Ip_pxConfig;
  _9 = Clock_Ip_pxConfig.13_8->ConfigureFrequenciesCount;
  if (Index_26 < _9)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # ConfiguredCoreClock_25 = PHI <ConfiguredCoreClock_28(2), ConfiguredCoreClock_32(5), ConfiguredCoreClock_28(7)>
  # DEBUG ConfiguredCoreClock => ConfiguredCoreClock_25
  # DEBUG BEGIN_STMT
  if (ConfiguredCoreClock_25 <= 167000000)
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (ConfiguredCoreClock_25 <= 66000000)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  RwscSetting_40 = 1;
  # DEBUG RwscSetting => RwscSetting_40
  goto <bb 23>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (ConfiguredCoreClock_25 <= 100000000)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  RwscSetting_39 = 2;
  # DEBUG RwscSetting => RwscSetting_39
  goto <bb 23>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  if (ConfiguredCoreClock_25 <= 133000000)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  RwscSetting_38 = 3;
  # DEBUG RwscSetting => RwscSetting_38
  goto <bb 23>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  RwscSetting_37 = 4;
  # DEBUG RwscSetting => RwscSetting_37
  goto <bb 23>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (ConfiguredCoreClock_25 <= 200000000)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  RwscSetting_36 = 5;
  # DEBUG RwscSetting => RwscSetting_36
  goto <bb 23>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  if (ConfiguredCoreClock_25 <= 233000000)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  RwscSetting_35 = 6;
  # DEBUG RwscSetting => RwscSetting_35
  goto <bb 23>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  if (ConfiguredCoreClock_25 <= 250000000)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  RwscSetting_34 = 7;
  # DEBUG RwscSetting => RwscSetting_34
  goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  RwscSetting_33 = 7;
  # DEBUG RwscSetting => RwscSetting_33

  <bb 23> :
  # RwscSetting_24 = PHI <RwscSetting_39(12), RwscSetting_36(17), RwscSetting_35(19), RwscSetting_34(21), RwscSetting_33(22), RwscSetting_40(10), RwscSetting_37(15), RwscSetting_38(14)>
  # DEBUG RwscSetting => RwscSetting_24
  # DEBUG BEGIN_STMT
  _10 = 1076805632B;
  _11 ={v} _10->CTL;
  _12 = 1076805632B;
  _13 = _11 & 4294934527;
  _12->CTL ={v} _13;
  # DEBUG BEGIN_STMT
  _14 = 1076805632B;
  _15 ={v} _14->CTL;
  _16 = 1076805632B;
  _17 = _15 & 4294959359;
  _16->CTL ={v} _17;
  # DEBUG BEGIN_STMT
  _18 = 1076805632B;
  _19 ={v} _18->CTL;
  _20 = RwscSetting_24 << 8;
  _21 = _20 & 7936;
  _22 = 1076805632B;
  _23 = _19 | _21;
  _22->CTL ={v} _23;
  return;

}


Clock_Ip_PowerClockIpModules ()
{
  boolean TimeoutOccurred;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  struct MC_ME_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  struct MC_ME_Type * _4;
  long unsigned int _5;
  struct MC_ME_Type * _6;
  long unsigned int _7;
  struct MC_ME_Type * _8;
  long unsigned int _9;
  struct MC_ME_Type * _10;
  long unsigned int _11;
  struct MC_ME_Type * _12;
  long unsigned int _13;
  struct MC_ME_Type * _14;
  long unsigned int _15;
  long unsigned int TimeoutTicks.0_16;
  struct MC_ME_Type * _17;
  long unsigned int _18;
  long unsigned int _19;
  _Bool _20;
  struct MC_ME_Type * _21;
  long unsigned int _22;
  long unsigned int _23;
  struct MC_ME_Type * _24;
  long unsigned int _25;
  struct MC_ME_Type * _26;
  long unsigned int _27;
  struct MC_ME_Type * _28;
  long unsigned int _29;
  struct MC_ME_Type * _30;
  long unsigned int _31;
  struct MC_ME_Type * _32;
  long unsigned int _33;
  struct MC_ME_Type * _34;
  long unsigned int _35;
  long unsigned int TimeoutTicks.1_36;
  struct MC_ME_Type * _37;
  long unsigned int _38;
  long unsigned int _39;
  _Bool _40;
  struct MC_ME_Type * _41;
  long unsigned int _42;
  long unsigned int _43;
  struct MC_ME_Type * _44;
  long unsigned int _45;
  struct MC_ME_Type * _46;
  long unsigned int _47;
  struct MC_ME_Type * _48;
  long unsigned int _49;
  struct MC_ME_Type * _50;
  long unsigned int _51;
  struct MC_ME_Type * _52;
  long unsigned int _53;
  struct MC_ME_Type * _54;
  long unsigned int _55;
  long unsigned int TimeoutTicks.2_56;
  struct MC_ME_Type * _57;
  long unsigned int _58;
  long unsigned int _59;
  _Bool _60;
  struct MC_ME_Type * _61;
  long unsigned int _62;
  long unsigned int _63;
  struct MC_ME_Type * _64;
  long unsigned int _65;
  struct MC_ME_Type * _66;
  long unsigned int _67;
  struct MC_ME_Type * _68;
  long unsigned int _69;
  struct MC_ME_Type * _70;
  long unsigned int _71;
  struct MC_ME_Type * _72;
  long unsigned int _73;
  struct MC_ME_Type * _74;
  long unsigned int _75;
  long unsigned int TimeoutTicks.3_76;
  struct MC_ME_Type * _77;
  long unsigned int _78;
  long unsigned int _79;
  _Bool _80;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred_89 = 0;
  # DEBUG TimeoutOccurred => TimeoutOccurred_89
  # DEBUG BEGIN_STMT
  _1 = 1076740096B;
  _2 ={v} _1->PRTN1_COFB1_STAT;
  _3 = _2 & 16777216;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = 1076740096B;
  _5 ={v} _4->PRTN1_COFB1_CLKEN;
  _6 = 1076740096B;
  _7 = _5 | 16777216;
  _6->PRTN1_COFB1_CLKEN ={v} _7;
  # DEBUG BEGIN_STMT
  _8 = 1076740096B;
  _9 ={v} _8->PRTN1_PCONF;
  _10 = 1076740096B;
  _11 = _9 | 1;
  _10->PRTN1_PCONF ={v} _11;
  # DEBUG BEGIN_STMT
  _12 = 1076740096B;
  _13 ={v} _12->PRTN1_PUPD;
  _14 = 1076740096B;
  _15 = _13 | 1;
  _14->PRTN1_PUPD ={v} _15;
  # DEBUG BEGIN_STMT
  Clock_Ip_McMeEnterKey ();
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.0_16 = TimeoutTicks;
  TimeoutOccurred_97 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_16);
  # DEBUG TimeoutOccurred => TimeoutOccurred_97
  # DEBUG BEGIN_STMT
  _17 = 1076740096B;
  _18 ={v} _17->PRTN1_COFB1_STAT;
  _19 = _18 & 16777216;
  if (_19 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _20 = ~TimeoutOccurred_97;
  if (_20 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_97 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ReportClockErrors (1, 6);

  <bb 8> :
  # DEBUG BEGIN_STMT
  _21 = 1076740096B;
  _22 ={v} _21->PRTN1_COFB1_STAT;
  _23 = _22 & 2097152;
  if (_23 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _24 = 1076740096B;
  _25 ={v} _24->PRTN1_COFB1_CLKEN;
  _26 = 1076740096B;
  _27 = _25 | 2097152;
  _26->PRTN1_COFB1_CLKEN ={v} _27;
  # DEBUG BEGIN_STMT
  _28 = 1076740096B;
  _29 ={v} _28->PRTN1_PCONF;
  _30 = 1076740096B;
  _31 = _29 | 1;
  _30->PRTN1_PCONF ={v} _31;
  # DEBUG BEGIN_STMT
  _32 = 1076740096B;
  _33 ={v} _32->PRTN1_PUPD;
  _34 = 1076740096B;
  _35 = _33 | 1;
  _34->PRTN1_PUPD ={v} _35;
  # DEBUG BEGIN_STMT
  Clock_Ip_McMeEnterKey ();
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 10> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.1_36 = TimeoutTicks;
  TimeoutOccurred_105 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.1_36);
  # DEBUG TimeoutOccurred => TimeoutOccurred_105
  # DEBUG BEGIN_STMT
  _37 = 1076740096B;
  _38 ={v} _37->PRTN1_COFB1_STAT;
  _39 = _38 & 2097152;
  if (_39 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _40 = ~TimeoutOccurred_105;
  if (_40 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_105 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ReportClockErrors (1, 4);

  <bb 14> :
  # DEBUG BEGIN_STMT
  _41 = 1076740096B;
  _42 ={v} _41->PRTN1_COFB1_STAT;
  _43 = _42 & 524288;
  if (_43 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _44 = 1076740096B;
  _45 ={v} _44->PRTN1_COFB1_CLKEN;
  _46 = 1076740096B;
  _47 = _45 | 524288;
  _46->PRTN1_COFB1_CLKEN ={v} _47;
  # DEBUG BEGIN_STMT
  _48 = 1076740096B;
  _49 ={v} _48->PRTN1_PCONF;
  _50 = 1076740096B;
  _51 = _49 | 1;
  _50->PRTN1_PCONF ={v} _51;
  # DEBUG BEGIN_STMT
  _52 = 1076740096B;
  _53 ={v} _52->PRTN1_PUPD;
  _54 = 1076740096B;
  _55 = _53 | 1;
  _54->PRTN1_PUPD ={v} _55;
  # DEBUG BEGIN_STMT
  Clock_Ip_McMeEnterKey ();
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 16> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.2_56 = TimeoutTicks;
  TimeoutOccurred_113 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.2_56);
  # DEBUG TimeoutOccurred => TimeoutOccurred_113
  # DEBUG BEGIN_STMT
  _57 = 1076740096B;
  _58 ={v} _57->PRTN1_COFB1_STAT;
  _59 = _58 & 524288;
  if (_59 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  _60 = ~TimeoutOccurred_113;
  if (_60 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_113 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ReportClockErrors (1, 5);

  <bb 20> :
  # DEBUG BEGIN_STMT
  _61 = 1076740096B;
  _62 ={v} _61->PRTN1_COFB1_STAT;
  _63 = _62 & 32768;
  if (_63 == 0)
    goto <bb 21>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  _64 = 1076740096B;
  _65 ={v} _64->PRTN1_COFB1_CLKEN;
  _66 = 1076740096B;
  _67 = _65 | 32768;
  _66->PRTN1_COFB1_CLKEN ={v} _67;
  # DEBUG BEGIN_STMT
  _68 = 1076740096B;
  _69 ={v} _68->PRTN1_PCONF;
  _70 = 1076740096B;
  _71 = _69 | 1;
  _70->PRTN1_PCONF ={v} _71;
  # DEBUG BEGIN_STMT
  _72 = 1076740096B;
  _73 ={v} _72->PRTN1_PUPD;
  _74 = 1076740096B;
  _75 = _73 | 1;
  _74->PRTN1_PUPD ={v} _75;
  # DEBUG BEGIN_STMT
  Clock_Ip_McMeEnterKey ();
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 22> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.3_76 = TimeoutTicks;
  TimeoutOccurred_121 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.3_76);
  # DEBUG TimeoutOccurred => TimeoutOccurred_121
  # DEBUG BEGIN_STMT
  _77 = 1076740096B;
  _78 ={v} _77->PRTN1_COFB1_STAT;
  _79 = _78 & 32768;
  if (_79 == 0)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  _80 = ~TimeoutOccurred_121;
  if (_80 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_121 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ReportClockErrors (1, 145);

  <bb 26> :
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


