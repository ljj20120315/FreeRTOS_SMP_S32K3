callgraph:

Clock_Ip_GetConfiguredFrequencyValue/6 (Clock_Ip_GetConfiguredFrequencyValue) @0627d540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_CgmXPcfsSdurDivcDiveDivs/1 (118111600 (estimated locally),0.49 per call) 
  Calls: 
Clock_Ip_CgmXPcfsSdurDivcDiveDivs/1 (Clock_Ip_CgmXPcfsSdurDivcDiveDivs) @0621c700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8ClockFeatures/3 (read) Clock_Ip_apxCgmPcfs/4 (read) Clock_Ip_au8ClockFeatures/3 (read) Hash.2/5 (read) Hash.2/5 (write) AMax.1/7 (read) PcfsRate.0/8 (read) 
  Referring: Clock_Ip_axPcfsCallbacks/2 (addr) 
  Availability: available
  Function flags: count:241635845 (estimated locally) body optimize_size
  Called by: 
  Calls: Clock_Ip_GetConfiguredFrequencyValue/6 (118111600 (estimated locally),0.49 per call) 
Clock_Ip_ProgressiveFrequencyClockSwitchEmpty/0 (Clock_Ip_ProgressiveFrequencyClockSwitchEmpty) @0621c8c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: Clock_Ip_axPcfsCallbacks/2 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body nonfreeing_fn optimize_size
  Called by: 
  Calls: 
Clearing variable flags:

Promotable global:Hash (uid=0)

Function name:Clock_Ip_CgmXPcfsSdurDivcDiveDivs/1:
  locals read: Hash 
  locals written: Hash 
Function name:Clock_Ip_ProgressiveFrequencyClockSwitchEmpty/0:
  locals read: 
  locals written: 

 ordered call graph: reduced
Clock_Ip_CgmXPcfsSdurDivcDiveDivs/1 (Clock_Ip_CgmXPcfsSdurDivcDiveDivs) @0621c700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  Aux: @04054050
  References: Clock_Ip_au8ClockFeatures/3 (read) Clock_Ip_apxCgmPcfs/4 (read) Clock_Ip_au8ClockFeatures/3 (read) Hash.2/5 (read) Hash.2/5 (write) AMax.1/7 (read) PcfsRate.0/8 (read) 
  Referring: Clock_Ip_axPcfsCallbacks/2 (addr) 
  Availability: available
  Function flags: count:241635845 (estimated locally) body optimize_size
  Called by: 
  Calls: Clock_Ip_GetConfiguredFrequencyValue/6 (118111600 (estimated locally),0.49 per call) 
Clock_Ip_ProgressiveFrequencyClockSwitchEmpty/0 (Clock_Ip_ProgressiveFrequencyClockSwitchEmpty) @0621c8c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  Aux: @04053f50
  References: 
  Referring: Clock_Ip_axPcfsCallbacks/2 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body nonfreeing_fn optimize_size
  Called by: 
  Calls: 


Function name:Clock_Ip_ProgressiveFrequencyClockSwitchEmpty/0:
    locals read: 
    locals written: 
  globals read: 
  globals written: 

Function name:Clock_Ip_CgmXPcfsSdurDivcDiveDivs/1:
    locals read: Hash 
    locals written: Hash 
  globals read: ALL
  globals written: ALL
Clock_Ip_CgmXPcfsSdurDivcDiveDivs (const struct Clock_Ip_PcfsConfigType * Config)
{
  uint32 DivEndValue;
  uint32 DivStartValue;
  uint32 DivcInit;
  uint32 Sdur;
  uint32 K;
  uint32 Var3;
  uint32 Var2;
  uint32 Var1;
  uint32 Index;
  uint32 Rate;
  uint32 AmaxBrut;
  uint32 Fsafe;
  uint32 Finput;
  static uint32 Hash[6];
  static const uint32 PcfsRate[6] = {0, 12, 48, 112, 184, 1000};
  static const uint32 AMax[6] = {0, 5, 10, 15, 20, 100};
  uint32 HwIndex;
  volatile struct Clock_Ip_CgmPcfsType * CgmPcfsBase;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  <unnamed type> _4;
  unsigned char _5;
  int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;
  long unsigned int _42;
  long unsigned int _43;
  long unsigned int _44;

  <bb 2> [local count: 241635845]:
  # DEBUG BEGIN_STMT
  _1 = Config_57(D)->SelectorName;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  _3 = (int) _2;
  CgmPcfsBase_58 = Clock_Ip_apxCgmPcfs[_3];
  # DEBUG CgmPcfsBase => CgmPcfsBase_58
  # DEBUG BEGIN_STMT
  _4 = Config_57(D)->Name;
  _5 = Clock_Ip_au8ClockFeatures[_4][7];
  HwIndex_59 = (uint32) _5;
  # DEBUG HwIndex => HwIndex_59
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Finput => 0
  # DEBUG BEGIN_STMT
  # DEBUG Fsafe => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Rate => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _7 = (int) _5;
  _8 = Hash[_7];
  _9 = Config_57(D)->ClockSourceFrequency;
  _10 = Config_57(D)->MaxAllowableIDDchange;
  _11 = _9 ^ _10;
  _12 = _4 ^ _11;
  _13 = _1 ^ _12;
  _14 = Config_57(D)->StepDuration;
  _15 = _13 ^ _14;
  if (_8 != _15)
    goto <bb 3>; [48.88%]
  else
    goto <bb 17>; [51.12%]

  <bb 3> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  Hash[_7] = _15;
  # DEBUG BEGIN_STMT
  _16 = Config_57(D)->ClockSourceFrequency;
  Finput_61 = _16 / 1000000;
  # DEBUG Finput => Finput_61
  # DEBUG BEGIN_STMT
  _17 = Clock_Ip_GetConfiguredFrequencyValue (0);
  Fsafe_63 = _17 / 1000000;
  # DEBUG Fsafe => Fsafe_63
  # DEBUG BEGIN_STMT
  _18 = Config_57(D)->MaxAllowableIDDchange;
  _19 = Config_57(D)->StepDuration;
  _20 = _18 * _19;
  _21 = _20 * 100000;
  _22 = Finput_61 * 2360;
  AmaxBrut_64 = _21 / _22;
  # DEBUG AmaxBrut => AmaxBrut_64
  # DEBUG BEGIN_STMT
  # DEBUG Rate => AmaxBrut_64
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (AmaxBrut_64 > 100)
    goto <bb 8>; [50.00%]
  else
    goto <bb 19>; [50.00%]

  <bb 19> [local count: 59055800]:
  goto <bb 7>; [100.00%]

  <bb 4> [local count: 295208151]:
  # DEBUG BEGIN_STMT
  _23 = Index_48 + 4294967295;
  _24 = AMax[_23];
  if (_24 < AmaxBrut_64)
    goto <bb 5>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 5> [local count: 147604076]:
  # DEBUG BEGIN_STMT
  Rate_65 = PcfsRate[Index_48];
  # DEBUG Rate => Rate_65

  <bb 6> [local count: 295208151]:
  # Rate_45 = PHI <Rate_46(4), Rate_65(5)>
  # DEBUG Rate => Rate_45
  # DEBUG BEGIN_STMT
  Index_66 = Index_48 + 1;
  # DEBUG Index => Index_66

  <bb 7> [local count: 354263951]:
  # Rate_46 = PHI <Rate_45(6), AmaxBrut_64(19)>
  # Index_48 = PHI <Index_66(6), 1(19)>
  # DEBUG Index => Index_48
  # DEBUG Rate => Rate_46
  # DEBUG BEGIN_STMT
  if (Index_48 != 6)
    goto <bb 4>; [83.33%]
  else
    goto <bb 8>; [16.67%]

  <bb 8> [local count: 118111600]:
  # Rate_47 = PHI <Rate_46(7), 1000(3)>
  # DEBUG Rate => Rate_47
  # DEBUG BEGIN_STMT
  _25 = Finput_61 * 2048000;
  _26 = Rate_47 * Fsafe_63;
  _27 = _25 / _26;
  _28 = 2048000 / Rate_47;
  _29 = _27 - _28;
  Var1_67 = _29 + 256;
  # DEBUG Var1 => Var1_67
  # DEBUG BEGIN_STMT
  # DEBUG Var2 => 1073741824
  # DEBUG BEGIN_STMT
  # DEBUG Var3 => 0
  # DEBUG BEGIN_STMT
  goto <bb 10>; [100.00%]

  <bb 9> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  Var2_81 = Var2_51 >> 2;
  # DEBUG Var2 => Var2_81

  <bb 10> [local count: 1073741824]:
  # Var2_51 = PHI <1073741824(8), Var2_81(9)>
  # DEBUG Var2 => Var2_51
  # DEBUG BEGIN_STMT
  if (Var2_51 > Var1_67)
    goto <bb 9>; [89.00%]
  else
    goto <bb 18>; [11.00%]

  <bb 18> [local count: 118111600]:
  goto <bb 15>; [100.00%]

  <bb 12> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _30 = Var2_52 + Var3_54;
  if (_30 <= Var1_50)
    goto <bb 13>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 13> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  Var1_77 = Var1_50 - _30;
  # DEBUG Var1 => Var1_77
  # DEBUG BEGIN_STMT
  _31 = Var2_52 << 1;
  Var3_78 = _31 + Var3_54;
  # DEBUG Var3 => Var3_78

  <bb 14> [local count: 955630225]:
  # Var1_49 = PHI <Var1_50(12), Var1_77(13)>
  # Var3_53 = PHI <Var3_54(12), Var3_78(13)>
  # DEBUG Var3 => Var3_53
  # DEBUG Var1 => Var1_49
  # DEBUG BEGIN_STMT
  Var3_79 = Var3_53 >> 1;
  # DEBUG Var3 => Var3_79
  # DEBUG BEGIN_STMT
  Var2_80 = Var2_52 >> 2;
  # DEBUG Var2 => Var2_80

  <bb 15> [local count: 1073741824]:
  # Var1_50 = PHI <Var1_49(14), Var1_67(18)>
  # Var2_52 = PHI <Var2_80(14), Var2_51(18)>
  # Var3_54 = PHI <Var3_79(14), 0(18)>
  # DEBUG Var3 => Var3_54
  # DEBUG Var2 => Var2_52
  # DEBUG Var1 => Var1_50
  # DEBUG BEGIN_STMT
  if (Var2_52 != 0)
    goto <bb 12>; [89.00%]
  else
    goto <bb 16>; [11.00%]

  <bb 16> [local count: 118111600]:
  # Var3_6 = PHI <Var3_54(15)>
  # DEBUG BEGIN_STMT
  _32 = Var3_6 << 2;
  _33 = _32 + 191;
  K_68 = _33 >> 7;
  # DEBUG K => K_68
  # DEBUG BEGIN_STMT
  Sdur_69 = _19 * Fsafe_63;
  # DEBUG Sdur => Sdur_69
  # DEBUG BEGIN_STMT
  DivcInit_70 = Rate_47 * K_68;
  # DEBUG DivcInit => DivcInit_70
  # DEBUG BEGIN_STMT
  # DEBUG DivcRate => Rate_47
  # DEBUG BEGIN_STMT
  _34 = K_68 + 1;
  _35 = _34 * DivcInit_70;
  _36 = _35 >> 1;
  DivStartValue_71 = _36 + 999;
  # DEBUG DivStartValue => DivStartValue_71
  # DEBUG BEGIN_STMT
  _37 = Finput_61 * 1000;
  _38 = _37 / Fsafe_63;
  DivEndValue_72 = _38 + 4294967295;
  # DEBUG DivEndValue => DivEndValue_72
  # DEBUG BEGIN_STMT
  _39 = Sdur_69 & 65535;
  CgmPcfsBase_58->PCFS_SDUR ={v} _39;
  # DEBUG BEGIN_STMT
  _40 = Rate_47 & 255;
  _41 = DivcInit_70 << 16;
  _42 = _40 | _41;
  CgmPcfsBase_58->PCFS[HwIndex_59].DIVC ={v} _42;
  # DEBUG BEGIN_STMT
  _43 = DivEndValue_72 & 1048575;
  CgmPcfsBase_58->PCFS[HwIndex_59].DIVE ={v} _43;
  # DEBUG BEGIN_STMT
  _44 = DivStartValue_71 & 1048575;
  CgmPcfsBase_58->PCFS[HwIndex_59].DIVS ={v} _44;

  <bb 17> [local count: 241635845]:
  return;

}


Clock_Ip_ProgressiveFrequencyClockSwitchEmpty (const struct Clock_Ip_PcfsConfigType * Config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  return;

}


