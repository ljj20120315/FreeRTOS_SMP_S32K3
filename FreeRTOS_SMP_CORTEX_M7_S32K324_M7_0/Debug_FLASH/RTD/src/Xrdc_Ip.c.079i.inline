IPA function summary for Xrdc_Ip_GetDomainIDErrorStatus_Privileged.part.0.isra/44 inlinable
  global time:     360.909094
  self size:       35
  global size:     35
  min size:       32
  self stack:      0
  global stack:    0
    size:24.000000, time:148.545456
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Xrdc_Ip_GetDetailError.constprop/43 function not considered for inlining
      freq:8.09 loop depth: 1 size: 4 time: 13 callee size:26 stack: 4
       op0 change 12.350000% of time
       op2 change 12.350000% of time
    Xrdc_Ip_GetDetailError.constprop/43 function not considered for inlining
      freq:8.09 loop depth: 1 size: 4 time: 13 callee size:26 stack: 4
       op0 change 12.350000% of time
       op2 change 12.350000% of time

IPA function summary for Xrdc_Ip_GetDetailError.constprop/43 inlinable
  global time:     30.585000
  self size:       52
  global size:     52
  min size:       31
  self stack:      4
  global stack:    4
    size:30.500000, time:19.185000
    size:8.500000, time:4.270000,  executed if:(not inlined)
    size:13.000000, time:7.130000,  nonconst if:(op1 changed)
  calls:

IPA function summary for Xrdc_Ip_LockProcessID_Privileged.part.0/40 inlinable
  global time:     11.000000
  self size:       12
  global size:     12
  min size:       7
  self stack:      0
  global stack:    0
    size:7.000000, time:7.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:

IPA function summary for Xrdc_Ip_SetProcessID_Privileged.part.0/37 inlinable
  global time:     23.670000
  self size:       37
  global size:     37
  min size:       5
  self stack:      0
  global stack:    0
    size:5.000000, time:5.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:1.000000,  nonconst if:(op2 changed)
    size:8.000000, time:2.640000,  executed if:(op2 != 1)
    size:2.000000, time:0.660000,  executed if:(op2 != 1),  nonconst if:(op0 changed) && (op2 != 1)
    size:1.000000, time:0.330000,  executed if:(op2 != 1),  nonconst if:(op1 changed) && (op2 != 1)
    size:9.000000, time:1.530000,  executed if:(op2 == 1)
    size:2.000000, time:0.340000,  executed if:(op2 == 1),  nonconst if:(op0 changed) && (op2 == 1)
    size:1.000000, time:0.170000,  executed if:(op2 == 1),  nonconst if:(op1 changed) && (op2 == 1)
  calls:
    SchM_Enter_Rm_RM_EXCLUSIVE_AREA_00/20 function body not available
      freq:0.17 loop depth: 0 size: 1 time: 10 predicate: (op2 == 1)
    SchM_Exit_Rm_RM_EXCLUSIVE_AREA_00/21 function body not available
      freq:0.17 loop depth: 0 size: 1 time: 10 predicate: (op2 == 1)
    SchM_Enter_Rm_RM_EXCLUSIVE_AREA_00/20 function body not available
      freq:0.33 loop depth: 0 size: 1 time: 10 predicate: (op2 != 1)
    SchM_Exit_Rm_RM_EXCLUSIVE_AREA_00/21 function body not available
      freq:0.33 loop depth: 0 size: 1 time: 10 predicate: (op2 != 1)

IPA function summary for Xrdc_Ip_Init_Privileged.part.0/33 inlinable
  global time:     158.886363
  self size:       60
  global size:     60
  min size:       49
  self stack:      0
  global stack:    0
    size:43.000000, time:79.920454
    size:7.000000, time:9.215909,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 128] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 128] changed)
    size:0.500000, time:0.250000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:1.500000, time:0.750000,  nonconst if:(op0[ref offset: 0] changed)
  calls:
    Xrdc_Memory_Config_Descriptor/3 function not considered for inlining
      freq:2.02 loop depth: 1 size: 2 time: 11 callee size:37 stack: 0
    Xrdc_Peripheral_Access_Config/4 function not considered for inlining
      freq:2.02 loop depth: 1 size: 2 time: 11 callee size:31 stack: 0
    Xrdc_Domain_Init/5 function not considered for inlining
      freq:2.02 loop depth: 1 size: 2 time: 11 callee size:34 stack: 0

IPA function summary for Xrdc_Ip_GetDomainIDErrorStatus/19 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       3
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Xrdc_Ip_GetDomainIDErrorStatus_Privileged/14 function not considered for inlining
      freq:1.00 loop depth: 0 size: 3 time: 12 callee size: 8 stack: 0

IPA function summary for Xrdc_Ip_LockProcessID/18 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Xrdc_Ip_LockProcessID_Privileged/12 function not considered for inlining
      freq:1.00 loop depth: 0 size: 2 time: 11 callee size: 8 stack: 0

IPA function summary for Xrdc_Ip_SetProcessID/17 inlinable
  global time:     15.000000
  self size:       7
  global size:     7
  min size:       4
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Xrdc_Ip_SetProcessID_Privileged/11 function not considered for inlining
      freq:1.00 loop depth: 0 size: 4 time: 13 callee size:11 stack: 0

IPA function summary for Xrdc_Ip_GetDomainID/16 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       3
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Xrdc_Ip_GetDomainID_Privileged/9 function not considered for inlining
      freq:1.00 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0

IPA function summary for Xrdc_Ip_Init/15 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Xrdc_Ip_Init_Privileged/10 function not considered for inlining
      freq:1.00 loop depth: 0 size: 2 time: 11 callee size:11 stack: 0

IPA function summary for Xrdc_Ip_GetDomainIDErrorStatus_Privileged/14 inlinable
  global time:     11.000000
  self size:       16
  global size:     16
  min size:       11
  self stack:      0
  global stack:    0
    size:8.000000, time:6.000000
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op1 changed)
  calls:
    Xrdc_Ip_GetDomainIDErrorStatus_Privileged.part.0.isra/44 function not considered for inlining
      freq:0.25 loop depth: 0 size: 3 time: 12 callee size:17 stack: 0

IPA function summary for Xrdc_Ip_LockProcessID_Privileged/12 inlinable
  global time:     11.250000
  self size:       16
  global size:     16
  min size:       11
  self stack:      0
  global stack:    0
    size:9.000000, time:6.500000
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:2.000000, time:1.500000,  nonconst if:(op0 changed)
  calls:
    Xrdc_Ip_LockProcessID_Privileged.part.0/40 function not considered for inlining
      freq:0.25 loop depth: 0 size: 2 time: 11 callee size: 6 stack: 0

IPA function summary for Xrdc_Ip_SetProcessID_Privileged/11 inlinable
  global time:     10.875000
  self size:       23
  global size:     23
  min size:       17
  self stack:      0
  global stack:    0
    size:13.000000, time:7.250000
    size:3.000000, time:0.250000,  executed if:(not inlined)
    size:2.000000, time:1.250000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op1 changed)
  calls:
    Xrdc_Ip_SetProcessID_Privileged.part.0/37 function not considered for inlining
      freq:0.12 loop depth: 0 size: 4 time: 13 callee size:18 stack: 0

IPA function summary for Xrdc_Ip_Init_Privileged/10 inlinable
  global time:     11.125000
  self size:       22
  global size:     22
  min size:       14
  self stack:      0
  global stack:    0
    size:12.000000, time:7.000000
    size:3.000000, time:0.250000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.250000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:1.500000, time:0.750000,  nonconst if:(op0[ref offset: 32] changed)
    size:0.500000, time:0.125000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 64] changed) && (not inlined)
    size:1.500000, time:0.375000,  nonconst if:(op0[ref offset: 64] changed)
  calls:
    Xrdc_Ip_Init_Privileged.part.0/33 function not considered for inlining
      freq:0.12 loop depth: 0 size: 2 time: 11 callee size:30 stack: 0

IPA function summary for Xrdc_Ip_GetDomainID_Privileged/9 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       5
  self stack:      0
  global stack:    0
    size:5.000000, time:5.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for Xrdc_Get_Secure_Attribute/8 inlinable
  global time:     5.565600
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.565600,  executed if:(op0 != 1),  nonconst if:(op0 changed) && (op0 != 1)
  calls:

IPA function summary for Xrdc_Get_Priviledge_Attribute/7 inlinable
  global time:     5.000000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:1.000000,  executed if:(op0 != 0),  nonconst if:(op0 changed) && (op0 != 0)
  calls:

IPA function summary for Xrdc_Domain_Init/5 inlinable
  global time:     14.287500
  self size:       69
  global size:     69
  min size:       8
  self stack:      0
  global stack:    0
    size:8.000000, time:6.000000
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.250000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:1.500000, time:0.750000,  nonconst if:(op0[ref offset: 32] changed)
    size:0.500000, time:0.125000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 96] changed) && (not inlined)
    size:2.500000, time:0.625000,  nonconst if:(op0[ref offset: 96] changed)
    size:2.000000, time:0.250000,  executed if:(op0[ref offset: 96] != 0),  nonconst if:(op0[ref offset: 96] changed) && (op0[ref offset: 96] != 0)
    size:0.500000, time:0.021250,  executed if:(op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0) && (not inlined),  nonconst if:(op0[ref offset: 0] changed) && (op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0) && (not inlined)
    size:2.500000, time:0.106250,  executed if:(op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0),  nonconst if:(op0[ref offset: 0] changed) && (op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0)
    size:0.500000, time:0.021250,  executed if:(op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0) && (not inlined),  nonconst if:(op0[ref offset: 64] changed) && (op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0) && (not inlined)
    size:2.500000, time:0.106250,  executed if:(op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0),  nonconst if:(op0[ref offset: 64] changed) && (op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0)
    size:11.500000, time:0.488750,  executed if:(op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0)
    size:0.500000, time:0.021250,  executed if:(op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0) && (not inlined),  nonconst if:(op0[ref offset: 256] changed) && (op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0) && (not inlined)
    size:0.500000, time:0.021250,  executed if:(op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0),  nonconst if:(op0[ref offset: 256] changed) && (op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0)
    size:0.500000, time:0.021250,  executed if:(op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0) && (not inlined),  nonconst if:(op0[ref offset: 288] changed) && (op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0) && (not inlined)
    size:0.500000, time:0.021250,  executed if:(op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0),  nonconst if:(op0[ref offset: 288] changed) && (op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0)
    size:0.500000, time:0.021250,  executed if:(op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0) && (not inlined)
    size:1.000000, time:0.042500,  executed if:(op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0),  nonconst if:(op0[ref offset: 256] changed || op0[ref offset: 288] changed) && (op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0)
    size:20.000000, time:2.500000,  executed if:(op0[ref offset: 96] == 0)
    size:3.000000, time:0.375000,  executed if:(op0[ref offset: 96] == 0) && (not inlined)
  calls:
    Xrdc_Get_Priviledge_Attribute/7 function not considered for inlining
      freq:0.04 loop depth: 0 size: 3 time: 12 callee size: 3 stack: 0 predicate: (op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0)
    Xrdc_Get_Secure_Attribute/8 function not considered for inlining
      freq:0.04 loop depth: 0 size: 3 time: 12 callee size: 3 stack: 0 predicate: (op0[ref offset: 96] == 1) && (op0[ref offset: 96] != 0)

IPA function summary for Xrdc_Peripheral_Access_Config/4 inlinable
  global time:     20.750000
  self size:       63
  global size:     63
  min size:       54
  self stack:      0
  global stack:    0
    size:53.500000, time:17.375000
    size:6.500000, time:1.375000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.250000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:1.500000, time:0.750000,  nonconst if:(op0[ref offset: 0] changed)
  calls:

IPA function summary for Xrdc_Memory_Config_Descriptor/3 inlinable
  global time:     23.750000
  self size:       75
  global size:     75
  min size:       61
  self stack:      0
  global stack:    0
    size:61.000000, time:19.250000
    size:11.000000, time:2.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.250000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:1.500000, time:0.750000,  nonconst if:(op0[ref offset: 0] changed)
  calls:


Flattening functions:
Overall time estimate: 774.653557 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
Enqueueing calls in Xrdc_Ip_GetDomainIDErrorStatus_Privileged.part.0.isra/44.
Enqueueing calls in Xrdc_Ip_GetDetailError.constprop/43.
Enqueueing calls in Xrdc_Ip_LockProcessID_Privileged.part.0/40.
Enqueueing calls in Xrdc_Ip_SetProcessID_Privileged.part.0/37.
Enqueueing calls in Xrdc_Ip_Init_Privileged.part.0/33.
Enqueueing calls in Xrdc_Ip_GetDomainIDErrorStatus/19.
Enqueueing calls in Xrdc_Ip_LockProcessID/18.
Enqueueing calls in Xrdc_Ip_SetProcessID/17.
Enqueueing calls in Xrdc_Ip_GetDomainID/16.
Enqueueing calls in Xrdc_Ip_Init/15.
Enqueueing calls in Xrdc_Ip_GetDomainIDErrorStatus_Privileged/14.
Enqueueing calls in Xrdc_Ip_LockProcessID_Privileged/12.
Enqueueing calls in Xrdc_Ip_SetProcessID_Privileged/11.
Enqueueing calls in Xrdc_Ip_Init_Privileged/10.
Enqueueing calls in Xrdc_Ip_GetDomainID_Privileged/9.
Enqueueing calls in Xrdc_Get_Secure_Attribute/8.
Enqueueing calls in Xrdc_Get_Priviledge_Attribute/7.
Enqueueing calls in Xrdc_Domain_Init/5.
Enqueueing calls in Xrdc_Peripheral_Access_Config/4.
Enqueueing calls in Xrdc_Memory_Config_Descriptor/3.

Considering Xrdc_Ip_LockProcessID_Privileged.part.0/40 with 12 size
 to be inlined into Xrdc_Ip_LockProcessID_Privileged/12 in unknown:0
 Estimated badness is -0.080745, frequency 0.25.

Considering Xrdc_Get_Secure_Attribute/8 with 7 size
 to be inlined into Xrdc_Domain_Init/5 in ../RTD/src/Xrdc_Ip.c:328
 Estimated badness is -0.034000, frequency 0.04.

Considering Xrdc_Get_Priviledge_Attribute/7 with 7 size
 to be inlined into Xrdc_Domain_Init/5 in ../RTD/src/Xrdc_Ip.c:330
 Estimated badness is -0.033521, frequency 0.04.

Considering Xrdc_Domain_Init/5 with 71 size
 to be inlined into Xrdc_Ip_Init_Privileged.part.0/33 in ../RTD/src/Xrdc_Ip.c:540
 Estimated badness is -0.013885, frequency 2.02.

Considering Xrdc_Ip_GetDomainIDErrorStatus_Privileged.part.0.isra/44 with 35 size
 to be inlined into Xrdc_Ip_GetDomainIDErrorStatus_Privileged/14 in unknown:0
 Estimated badness is -0.010728, frequency 0.25.

Considering Xrdc_Ip_SetProcessID_Privileged.part.0/37 with 37 size
 to be inlined into Xrdc_Ip_SetProcessID_Privileged/11 in unknown:0
 Estimated badness is -0.004717, frequency 0.12.
node context cache: 3 hits, 0 misses, 16 initializations

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:

Inlining Xrdc_Ip_Init_Privileged.part.0/33 size 120.
 Called once from Xrdc_Ip_Init_Privileged/10 22 insns.
 Inlined into Xrdc_Ip_Init_Privileged/10 which now has 132 size

Inlining Xrdc_Peripheral_Access_Config/4 size 63.
 Called once from Xrdc_Ip_Init_Privileged.part.0/33 120 insns.
 Inlined into Xrdc_Ip_Init_Privileged.part.0/33 which now has 120 size

Inlining Xrdc_Memory_Config_Descriptor/3 size 75.
 Called once from Xrdc_Ip_Init_Privileged.part.0/33 120 insns.
 Inlined into Xrdc_Ip_Init_Privileged.part.0/33 which now has 120 size
Overall time estimate: 260.269774 weighted by profile: 0.000000

Why inlining failed?
function body not available                       :        4 calls, 0.125000 freq, 0 count
--param max-inline-insns-auto limit reached       :        4 calls, 6.045455 freq, 0 count
call is unlikely and code size would grow         :        3 calls, 3.000000 freq, 0 count
IPA function summary for Xrdc_Ip_GetDetailError.constprop/43 inlinable
  global time:     30.585000
  self size:       52
  global size:     52
  min size:       31
  self stack:      4
  global stack:    4
  estimated growth:28
    size:30.500000, time:19.185000
    size:8.500000, time:4.270000,  executed if:(not inlined)
    size:13.000000, time:7.130000,  nonconst if:(op1 changed)
  calls:

IPA function summary for Xrdc_Ip_GetDomainIDErrorStatus/19 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       3
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Xrdc_Ip_GetDomainIDErrorStatus_Privileged/14 --param max-inline-insns-auto limit reached
      freq:1.00 loop depth: 0 size: 3 time: 12 callee size:22 stack: 0

IPA function summary for Xrdc_Ip_LockProcessID/18 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Xrdc_Ip_LockProcessID_Privileged/12 call is unlikely and code size would grow
      freq:1.00 loop depth: 0 size: 2 time: 11 callee size:11 stack: 0

IPA function summary for Xrdc_Ip_SetProcessID/17 inlinable
  global time:     15.000000
  self size:       7
  global size:     7
  min size:       4
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Xrdc_Ip_SetProcessID_Privileged/11 --param max-inline-insns-auto limit reached
      freq:1.00 loop depth: 0 size: 4 time: 13 callee size:26 stack: 0

IPA function summary for Xrdc_Ip_GetDomainID/16 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       3
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Xrdc_Ip_GetDomainID_Privileged/9 call is unlikely and code size would grow
      freq:1.00 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0

IPA function summary for Xrdc_Ip_Init/15 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Xrdc_Ip_Init_Privileged/10 call is unlikely and code size would grow
      freq:1.00 loop depth: 0 size: 2 time: 11 callee size:123 stack: 0

IPA function summary for Xrdc_Ip_GetDomainIDErrorStatus_Privileged/14 inlinable
  global time:     97.727273
  self size:       16
  global size:     45
  min size:       40
  self stack:      0
  global stack:    0
  estimated growth:10
    size:32.000000, time:43.136364
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op1 changed)
  calls:
    Xrdc_Ip_GetDomainIDErrorStatus_Privileged.part.0.isra/44 inlined
      freq:0.25
      Stack frame offset 0, callee self size 0
      Xrdc_Ip_GetDetailError.constprop/43 --param max-inline-insns-auto limit reached
        freq:2.02 loop depth: 1 size: 4 time: 13 callee size:26 stack: 4
         op0 change 12.350000% of time
         op2 change 12.350000% of time
      Xrdc_Ip_GetDetailError.constprop/43 --param max-inline-insns-auto limit reached
        freq:2.02 loop depth: 1 size: 4 time: 13 callee size:26 stack: 4
         op0 change 12.350000% of time
         op2 change 12.350000% of time

IPA function summary for Xrdc_Ip_LockProcessID_Privileged/12 inlinable
  global time:     10.750000
  self size:       16
  global size:     23
  min size:       16
  self stack:      0
  global stack:    0
  estimated growth:11
    size:16.000000, time:8.250000
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:4.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    Xrdc_Ip_LockProcessID_Privileged.part.0/40 inlined
      freq:0.25
      Stack frame offset 0, callee self size 0

IPA function summary for Xrdc_Ip_SetProcessID_Privileged/11 inlinable
  global time:     11.958750
  self size:       23
  global size:     53
  min size:       18
  self stack:      0
  global stack:    0
  estimated growth:16
    size:18.000000, time:7.875000
    size:3.000000, time:0.250000,  executed if:(not inlined)
    size:2.000000, time:1.250000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op1 changed)
    size:2.000000, time:0.125000,  nonconst if:(op2 changed)
    size:8.000000, time:0.330000,  executed if:(op2 != 1)
    size:2.000000, time:0.082500,  executed if:(op2 != 1),  nonconst if:(op2 != 1) && (op0 changed)
    size:1.000000, time:0.041250,  executed if:(op2 != 1),  nonconst if:(op2 != 1) && (op1 changed)
    size:9.000000, time:0.191250,  executed if:(op2 == 1)
    size:2.000000, time:0.042500,  executed if:(op2 == 1),  nonconst if:(op2 == 1) && (op0 changed)
    size:1.000000, time:0.021250,  executed if:(op2 == 1),  nonconst if:(op2 == 1) && (op1 changed)
  calls:
    Xrdc_Ip_SetProcessID_Privileged.part.0/37 inlined
      freq:0.12
      Stack frame offset 0, callee self size 0
      SchM_Enter_Rm_RM_EXCLUSIVE_AREA_00/20 function body not available
        freq:0.02 loop depth: 0 size: 1 time: 10 predicate: (op2 == 1)
      SchM_Exit_Rm_RM_EXCLUSIVE_AREA_00/21 function body not available
        freq:0.02 loop depth: 0 size: 1 time: 10 predicate: (op2 == 1)
      SchM_Enter_Rm_RM_EXCLUSIVE_AREA_00/20 function body not available
        freq:0.04 loop depth: 0 size: 1 time: 10 predicate: (op2 != 1)
      SchM_Exit_Rm_RM_EXCLUSIVE_AREA_00/21 function body not available
        freq:0.04 loop depth: 0 size: 1 time: 10 predicate: (op2 != 1)

IPA function summary for Xrdc_Ip_Init_Privileged/10 inlinable
  global time:     33.248752
  self size:       22
  global size:     247
  min size:       236
  self stack:      0
  global stack:    0
  estimated growth:16
    size:236.000000, time:30.217502
    size:3.000000, time:0.250000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.250000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:1.500000, time:0.750000,  nonconst if:(op0[ref offset: 32] changed)
    size:0.500000, time:0.125000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 64] changed) && (not inlined)
    size:1.500000, time:0.375000,  nonconst if:(op0[ref offset: 64] changed)
    size:1.500000, time:0.187500,  nonconst if:(op0[ref offset: 128] changed)
    size:1.500000, time:0.093750,  nonconst if:(op0[ref offset: 0] changed)
  calls:
    Xrdc_Ip_Init_Privileged.part.0/33 inlined
      freq:0.12
      Stack frame offset 0, callee self size 0
      Xrdc_Memory_Config_Descriptor/3 inlined
        freq:0.25
        Stack frame offset 0, callee self size 0
      Xrdc_Peripheral_Access_Config/4 inlined
        freq:0.25
        Stack frame offset 0, callee self size 0
      Xrdc_Domain_Init/5 inlined
        freq:0.25
        Stack frame offset 0, callee self size 0
        Xrdc_Get_Priviledge_Attribute/7 inlined
          freq:0.01
          Stack frame offset 0, callee self size 0
        Xrdc_Get_Secure_Attribute/8 inlined
          freq:0.01
          Stack frame offset 0, callee self size 0

IPA function summary for Xrdc_Ip_GetDomainID_Privileged/9 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       5
  self stack:      0
  global stack:    0
  estimated growth:2
    size:5.000000, time:5.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Xrdc_Ip_GetDomainIDErrorStatus_Privileged.part.0.isra.0/44 (Xrdc_Ip_GetDomainIDErrorStatus_Privileged.part.0.isra) @06e8d460
  Type: function definition analyzed
  Visibility: artificial
  References: 
  Referring: 
  Function Xrdc_Ip_GetDomainIDErrorStatus_Privileged.part.0.isra/44 is inline copy in Xrdc_Ip_GetDomainIDErrorStatus_Privileged/14
  Clone of Xrdc_Ip_GetDomainIDErrorStatus_Privileged.part.0/42
  Availability: local
  Function flags: count:5315554 (estimated locally) local split_part optimize_size
  Called by: Xrdc_Ip_GetDomainIDErrorStatus_Privileged/14 (inlined) (5315554 (estimated locally),0.25 per call) 
  Calls: Xrdc_Ip_GetDetailError.constprop.0/43 (43007664 (estimated locally),2.02 per call) Xrdc_Ip_GetDetailError.constprop.0/43 (43007664 (estimated locally),2.02 per call) 
Xrdc_Ip_GetDetailError.constprop.0/43 (Xrdc_Ip_GetDetailError.constprop) @06ec5460
  Type: function definition analyzed
  Visibility:
  References: 
  Referring: 
  Clone of Xrdc_Ip_GetDetailError/13
  Availability: local
  Function flags: count:1073741823 (estimated locally) local optimize_size
  Called by: Xrdc_Ip_GetDomainIDErrorStatus_Privileged.part.0.isra.0/44 (43007664 (estimated locally),2.02 per call) Xrdc_Ip_GetDomainIDErrorStatus_Privileged.part.0.isra.0/44 (43007664 (estimated locally),2.02 per call) 
  Calls: 
Xrdc_Ip_GetDomainIDErrorStatus_Privileged.part.0/42 (Xrdc_Ip_GetDomainIDErrorStatus_Privileged.part.0) @06d56540
  Type: function
  Body removed by symtab_remove_unreachable_nodes
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Availability: not_available
  Function flags: count:118111600 (estimated locally) body split_part optimize_size
  Called by: 
  Calls: 
Xrdc_Ip_LockProcessID_Privileged.part.0/40 (Xrdc_Ip_LockProcessID_Privileged.part.0) @06fd5380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function Xrdc_Ip_LockProcessID_Privileged.part.0/40 is inline copy in Xrdc_Ip_LockProcessID_Privileged/12
  Availability: local
  Function flags: count:5315554 (estimated locally) body local split_part optimize_size
  Called by: Xrdc_Ip_LockProcessID_Privileged/12 (inlined) (5315554 (estimated locally),0.25 per call) 
  Calls: 
Xrdc_Ip_SetProcessID_Privileged.part.0/37 (Xrdc_Ip_SetProcessID_Privileged.part.0) @06ec5380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function Xrdc_Ip_SetProcessID_Privileged.part.0/37 is inline copy in Xrdc_Ip_SetProcessID_Privileged/11
  Availability: local
  Function flags: count:2657777 (estimated locally) body local split_part optimize_size
  Called by: Xrdc_Ip_SetProcessID_Privileged/11 (inlined) (2657777 (estimated locally),0.12 per call) 
  Calls: SchM_Enter_Rm_RM_EXCLUSIVE_AREA_00/20 (451822 (estimated locally),0.02 per call) SchM_Exit_Rm_RM_EXCLUSIVE_AREA_00/21 (451822 (estimated locally),0.02 per call) SchM_Enter_Rm_RM_EXCLUSIVE_AREA_00/20 (877066 (estimated locally),0.04 per call) SchM_Exit_Rm_RM_EXCLUSIVE_AREA_00/21 (877066 (estimated locally),0.04 per call) 
Xrdc_Ip_Init_Privileged.part.0/33 (Xrdc_Ip_Init_Privileged.part.0) @06ec59a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function Xrdc_Ip_Init_Privileged.part.0/33 is inline copy in Xrdc_Ip_Init_Privileged/10
  Availability: local
  Function flags: count:2657777 (estimated locally) body local split_part optimize_size
  Called by: Xrdc_Ip_Init_Privileged/10 (inlined) (2657777 (estimated locally),0.12 per call) 
  Calls: Xrdc_Memory_Config_Descriptor/3 (inlined) (5375958 (estimated locally),0.25 per call) Xrdc_Peripheral_Access_Config/4 (inlined) (5375958 (estimated locally),0.25 per call) Xrdc_Domain_Init/5 (inlined) (5375958 (estimated locally),0.25 per call) 
SchM_Exit_Rm_RM_EXCLUSIVE_AREA_00/21 (SchM_Exit_Rm_RM_EXCLUSIVE_AREA_00) @06e731c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Xrdc_Ip_SetProcessID_Privileged.part.0/37 (451822 (estimated locally),0.02 per call) Xrdc_Ip_SetProcessID_Privileged.part.0/37 (877066 (estimated locally),0.04 per call) 
  Calls: 
SchM_Enter_Rm_RM_EXCLUSIVE_AREA_00/20 (SchM_Enter_Rm_RM_EXCLUSIVE_AREA_00) @06e730e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Xrdc_Ip_SetProcessID_Privileged.part.0/37 (451822 (estimated locally),0.02 per call) Xrdc_Ip_SetProcessID_Privileged.part.0/37 (877066 (estimated locally),0.04 per call) 
  Calls: 
Xrdc_Ip_GetDomainIDErrorStatus/19 (Xrdc_Ip_GetDomainIDErrorStatus) @06d56c40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Xrdc_Ip_GetDomainIDErrorStatus_Privileged/14 (1073741824 (estimated locally),1.00 per call) 
Xrdc_Ip_LockProcessID/18 (Xrdc_Ip_LockProcessID) @06d569a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Xrdc_Ip_LockProcessID_Privileged/12 (1073741824 (estimated locally),1.00 per call) 
Xrdc_Ip_SetProcessID/17 (Xrdc_Ip_SetProcessID) @06d56700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Xrdc_Ip_SetProcessID_Privileged/11 (1073741824 (estimated locally),1.00 per call) 
Xrdc_Ip_GetDomainID/16 (Xrdc_Ip_GetDomainID) @06d56460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Xrdc_Ip_GetDomainID_Privileged/9 (1073741824 (estimated locally),1.00 per call) 
Xrdc_Ip_Init/15 (Xrdc_Ip_Init) @06d561c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Xrdc_Ip_Init_Privileged/10 (1073741824 (estimated locally),1.00 per call) 
Xrdc_Ip_GetDomainIDErrorStatus_Privileged/14 (Xrdc_Ip_GetDomainIDErrorStatus_Privileged) @06d38ee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:21262216 (estimated locally) body optimize_size
  Called by: Xrdc_Ip_GetDomainIDErrorStatus/19 (1073741824 (estimated locally),1.00 per call) 
  Calls: Xrdc_Ip_GetDomainIDErrorStatus_Privileged.part.0.isra.0/44 (inlined) (5315554 (estimated locally),0.25 per call) 
Xrdc_Ip_GetDetailError/13 (Xrdc_Ip_GetDetailError) @06d38e00
  Type: function
  Body removed by symtab_remove_unreachable_nodes
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: not_available
  Function flags: count:1073741823 (estimated locally) body optimize_size
  Called by: 
  Calls: 
Xrdc_Ip_LockProcessID_Privileged/12 (Xrdc_Ip_LockProcessID_Privileged) @06d38a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: g_bAvailablePidRegisters/1 (read) 
  Referring: 
  Availability: available
  Function flags: count:21262216 (estimated locally) body optimize_size
  Called by: Xrdc_Ip_LockProcessID/18 (1073741824 (estimated locally),1.00 per call) 
  Calls: Xrdc_Ip_LockProcessID_Privileged.part.0/40 (inlined) (5315554 (estimated locally),0.25 per call) 
Xrdc_Ip_SetProcessID_Privileged/11 (Xrdc_Ip_SetProcessID_Privileged) @06d387e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: g_bAvailablePidRegisters/1 (read) 
  Referring: 
  Availability: available
  Function flags: count:21262216 (estimated locally) body optimize_size
  Called by: Xrdc_Ip_SetProcessID/17 (1073741824 (estimated locally),1.00 per call) 
  Calls: Xrdc_Ip_SetProcessID_Privileged.part.0/37 (inlined) (2657777 (estimated locally),0.12 per call) 
Xrdc_Ip_Init_Privileged/10 (Xrdc_Ip_Init_Privileged) @06d38460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:21262216 (estimated locally) body optimize_size
  Called by: Xrdc_Ip_Init/15 (1073741824 (estimated locally),1.00 per call) 
  Calls: Xrdc_Ip_Init_Privileged.part.0/33 (inlined) (2657777 (estimated locally),0.12 per call) 
Xrdc_Ip_GetDomainID_Privileged/9 (Xrdc_Ip_GetDomainID_Privileged) @06d38000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: Xrdc_Ip_GetDomainID/16 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Xrdc_Get_Secure_Attribute/8 (Xrdc_Get_Secure_Attribute) @06d808c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function Xrdc_Get_Secure_Attribute/8 is inline copy in Xrdc_Ip_Init_Privileged/10
  Availability: local
  Function flags: count:228478 (estimated locally) body local optimize_size
  Called by: Xrdc_Domain_Init/5 (inlined) (228478 (estimated locally),0.01 per call) 
  Calls: 
Xrdc_Get_Priviledge_Attribute/7 (Xrdc_Get_Priviledge_Attribute) @06d80380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function Xrdc_Get_Priviledge_Attribute/7 is inline copy in Xrdc_Ip_Init_Privileged/10
  Availability: local
  Function flags: count:228478 (estimated locally) body local optimize_size
  Called by: Xrdc_Domain_Init/5 (inlined) (228478 (estimated locally),0.01 per call) 
  Calls: 
Xrdc_Domain_Init/5 (Xrdc_Domain_Init) @06d80a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function Xrdc_Domain_Init/5 is inline copy in Xrdc_Ip_Init_Privileged/10
  Availability: local
  Function flags: count:5375958 (estimated locally) body local optimize_size
  Called by: Xrdc_Ip_Init_Privileged.part.0/33 (inlined) (5375958 (estimated locally),0.25 per call) 
  Calls: Xrdc_Get_Priviledge_Attribute/7 (inlined) (228478 (estimated locally),0.01 per call) Xrdc_Get_Secure_Attribute/8 (inlined) (228478 (estimated locally),0.01 per call) 
Xrdc_Peripheral_Access_Config/4 (Xrdc_Peripheral_Access_Config) @06d807e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function Xrdc_Peripheral_Access_Config/4 is inline copy in Xrdc_Ip_Init_Privileged/10
  Availability: local
  Function flags: count:5375958 (estimated locally) body local optimize_size
  Called by: Xrdc_Ip_Init_Privileged.part.0/33 (inlined) (5375958 (estimated locally),0.25 per call) 
  Calls: 
Xrdc_Memory_Config_Descriptor/3 (Xrdc_Memory_Config_Descriptor) @06d80540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function Xrdc_Memory_Config_Descriptor/3 is inline copy in Xrdc_Ip_Init_Privileged/10
  Availability: local
  Function flags: count:5375958 (estimated locally) body local optimize_size
  Called by: Xrdc_Ip_Init_Privileged.part.0/33 (inlined) (5375958 (estimated locally),0.25 per call) 
  Calls: 
g_bAvailablePidRegisters/1 (g_bAvailablePidRegisters) @06d7b6c0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Xrdc_Ip_SetProcessID_Privileged/11 (read) Xrdc_Ip_LockProcessID_Privileged/12 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known

;; Function Xrdc_Ip_GetDetailError.constprop (Xrdc_Ip_GetDetailError.constprop.0, funcdef_no=23, decl_uid=6239, cgraph_uid=42, symbol_order=43)

Xrdc_Ip_GetDetailError.constprop (uint8 u8SubInstance, struct Xrdc_Ip_DomainIDErrStatusType * pXrdcDomainIDErrorStatus)
{
  uint32 u32ErrorAcces;
  uint32 u32ErrorState;
  uint32 u32ErrorStatus;
  volatile uint32 u32DomainIDAccess;
  uint32 u32Instance;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  volatile uint32 * _5;
  int _8;
  int _10;
  int _11;
  long unsigned int _12;
  long unsigned int u32DomainIDAccess.3_13;
  long unsigned int u32DomainIDAccess.4_14;
  long unsigned int _15;
  volatile uint32 * _16;
  int _17;
  long unsigned int _18;
  long unsigned int _19;
  volatile uint32 * _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _26;
  long unsigned int _27;
  unsigned int _28;

  <bb 16> [local count: 1073741823]:
  # DEBUG D#4 s=> u32Instance
  # DEBUG u32Instance => D#4

  <bb 2> [local count: 1073741823]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = (long unsigned int) u8SubInstance_1(D);
  _3 = _2 << 4;
  _4 = _3 + 1076331524;
  _5 = (volatile uint32 *) _4;
  u32ErrorStatus_6 ={v} *_5;
  # DEBUG u32ErrorStatus => u32ErrorStatus_6
  # DEBUG BEGIN_STMT
  u32ErrorState_7 = u32ErrorStatus_6 >> 30;
  # DEBUG u32ErrorState => u32ErrorState_7
  # DEBUG BEGIN_STMT
  if (u32ErrorState_7 <= 1)
    goto <bb 3>; [41.00%]
  else
    goto <bb 4>; [59.00%]

  <bb 3> [local count: 440234143]:
  # DEBUG BEGIN_STMT
  _8 = (int) u8SubInstance_1(D);
  pXrdcDomainIDErrorStatus_9(D)->ErrorStatus[_8].ErrState = 0;
  goto <bb 7>; [100.00%]

  <bb 4> [local count: 633507680]:
  # DEBUG BEGIN_STMT
  if (u32ErrorState_7 == 2)
    goto <bb 5>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 5> [local count: 215392613]:
  # DEBUG BEGIN_STMT
  _10 = (int) u8SubInstance_1(D);
  pXrdcDomainIDErrorStatus_9(D)->ErrorStatus[_10].ErrState = 1;
  goto <bb 7>; [100.00%]

  <bb 6> [local count: 418115066]:
  # DEBUG BEGIN_STMT
  _11 = (int) u8SubInstance_1(D);
  pXrdcDomainIDErrorStatus_9(D)->ErrorStatus[_11].ErrState = 2;

  <bb 7> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (u32ErrorState_7 > 1)
    goto <bb 8>; [59.00%]
  else
    goto <bb 15>; [41.00%]

  <bb 8> [local count: 633507681]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _12 ={v} MEM[(volatile uint32 *)1076330740B];
  u32DomainIDAccess ={v} _12;
  # DEBUG BEGIN_STMT
  u32DomainIDAccess.3_13 ={v} u32DomainIDAccess;
  if (u32DomainIDAccess.3_13 <= 2)
    goto <bb 9>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 9> [local count: 316753840]:
  # DEBUG BEGIN_STMT
  u32DomainIDAccess.4_14 ={v} u32DomainIDAccess;
  pXrdcDomainIDErrorStatus_9(D)->DomainIDAccessError = u32DomainIDAccess.4_14;
  goto <bb 11>; [100.00%]

  <bb 10> [local count: 316753840]:
  # DEBUG BEGIN_STMT
  pXrdcDomainIDErrorStatus_9(D)->DomainIDAccessError = 255;

  <bb 11> [local count: 633507681]:
  # DEBUG BEGIN_STMT
  _15 = _3 + 1076331520;
  _16 = (volatile uint32 *) _15;
  _17 = (int) u8SubInstance_1(D);
  _18 ={v} *_16;
  pXrdcDomainIDErrorStatus_9(D)->ErrorStatus[_17].u32AddError = _18;
  # DEBUG BEGIN_STMT
  _19 = _3 + 1076331528;
  _20 = (volatile uint32 *) _19;
  _21 ={v} *_20;
  pXrdcDomainIDErrorStatus_9(D)->ErrorStatus[_17].u32AddErrorRemain = _21;
  # DEBUG BEGIN_STMT
  _22 = u32ErrorStatus_6 >> 24;
  _23 = _22 & 7;
  pXrdcDomainIDErrorStatus_9(D)->ErrorStatus[_17].u32ErrPort = _23;
  # DEBUG BEGIN_STMT
  _24 = u32ErrorStatus_6 >> 11;
  u32ErrorAcces_25 = _24 & 1;
  # DEBUG u32ErrorAcces => u32ErrorAcces_25
  # DEBUG BEGIN_STMT
  if (u32ErrorAcces_25 == 0)
    goto <bb 12>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 12> [local count: 316753840]:
  # DEBUG BEGIN_STMT
  pXrdcDomainIDErrorStatus_9(D)->ErrorStatus[_17].ErrAccess = 1;
  goto <bb 14>; [100.00%]

  <bb 13> [local count: 316753840]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  pXrdcDomainIDErrorStatus_9(D)->ErrorStatus[_17].ErrAccess = 2;

  <bb 14> [local count: 633507681]:
  # DEBUG BEGIN_STMT
  _26 = u32ErrorStatus_6 >> 8;
  _27 = _26 & 7;
  # DEBUG u32ErrorAttribute => _27
  # DEBUG INLINE_ENTRY NULL
  # DEBUG BEGIN_STMT
  # DEBUG errorStatus => 0
  # DEBUG BEGIN_STMT
  _28 = _27 + 1;
  # DEBUG errorStatus => _28
  # DEBUG BEGIN_STMT
  # DEBUG u32ErrorAttribute => NULL
  # DEBUG errorStatus => NULL
  pXrdcDomainIDErrorStatus_9(D)->ErrorStatus[_17].ErrAttribute = _28;

  <bb 15> [local count: 1073741824]:
  return;

}



;; Function Xrdc_Ip_GetDomainID_Privileged (Xrdc_Ip_GetDomainID_Privileged, funcdef_no=7, decl_uid=5968, cgraph_uid=8, symbol_order=9)

Xrdc_Ip_GetDomainID_Privileged (uint32 u32Instance)
{
  uint32 u32Value;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  u32Value_4 ={v} MEM[(volatile uint32 *)1076330740B];
  # DEBUG u32Value => u32Value_4
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  return u32Value_4;

}



;; Function Xrdc_Ip_Init_Privileged (Xrdc_Ip_Init_Privileged, funcdef_no=8, decl_uid=5966, cgraph_uid=9, symbol_order=10)


Symbols to be put in SSA form
{ D.6149 D.6285 D.6288 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 85
Number of blocks to update: 84 ( 99%)


Merging blocks 3 and 14
Merging blocks 5 and 13
Merging blocks 7 and 12
Removing basic block 8
Removing basic block 9
Removing basic block 10
Removing basic block 11
Removing basic block 16
Removing basic block 18
Merging blocks 19 and 20
Removing basic block 22
Removing basic block 23
Removing basic block 24
Removing basic block 28
Merging blocks 29 and 42
Removing basic block 31
Merging blocks 32 and 52
Removing basic block 34
Merging blocks 35 and 62
Removing basic block 37
Removing basic block 40
Removing basic block 43
Merging blocks 44 and 45
Removing basic block 47
Merging blocks 48 and 49
Merging blocks 50 and 41
Removing basic block 53
Merging blocks 54 and 55
Removing basic block 57
Merging blocks 58 and 59
Merging blocks 60 and 51
Removing basic block 63
Merging blocks 64 and 65
Removing basic block 67
Merging blocks 68 and 69
Merging blocks 73 and 81
Merging blocks 74 and 61
Merging blocks 79 and 75
Merging blocks 84 and 80
Merging blocks 84 and 76
;; 24 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
;;
;; Loop 18
;;  header 17, latch 17
;;  depth 1, outer 0
;;  nodes: 17
;;
;; Loop 19
;;  header 15, latch 15
;;  depth 1, outer 0
;;  nodes: 15
;;
;; Loop 20
;;  header 23, latch 23
;;  depth 1, outer 0
;;  nodes: 23
;;
;; Loop 21
;;  header 21, latch 21
;;  depth 1, outer 0
;;  nodes: 21
;;
;; Loop 22
;;  header 29, latch 29
;;  depth 1, outer 0
;;  nodes: 29
;;
;; Loop 23
;;  header 27, latch 27
;;  depth 1, outer 0
;;  nodes: 27
;;
;; Loop 11
;;  header 43, latch 42
;;  depth 1, outer 0
;;  nodes: 43 42
;;
;; Loop 12
;;  header 41, latch 40
;;  depth 1, outer 0
;;  nodes: 41 40 31 32 39 36 37 38 33 34 35 30 28 26
;;
;; Loop 13
;;  header 25, latch 24
;;  depth 1, outer 0
;;  nodes: 25 24 22 20
;;
;; Loop 14
;;  header 19, latch 18
;;  depth 1, outer 0
;;  nodes: 19 18 16 14
;;
;; Loop 15
;;  header 13, latch 12
;;  depth 1, outer 0
;;  nodes: 13 12
;;
;; Loop 16
;;  header 11, latch 11
;;  depth 1, outer 0
;;  nodes: 11
;;
;; Loop 17
;;  header 9, latch 9
;;  depth 1, outer 0
;;  nodes: 9
;;
;; Loop 8
;;  header 7, latch 7
;;  depth 1, outer 0
;;  nodes: 7
;;
;; Loop 9
;;  header 5, latch 5
;;  depth 1, outer 0
;;  nodes: 5
;;
;; Loop 10
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 6 5 }
;; 5 succs { 5 }
;; 6 succs { 8 7 }
;; 7 succs { 7 }
;; 8 succs { 10 9 }
;; 9 succs { 9 }
;; 10 succs { 13 11 }
;; 11 succs { 11 }
;; 12 succs { 13 }
;; 13 succs { 12 19 }
;; 14 succs { 16 15 }
;; 15 succs { 15 }
;; 16 succs { 18 17 }
;; 17 succs { 17 }
;; 18 succs { 19 }
;; 19 succs { 14 25 }
;; 20 succs { 22 21 }
;; 21 succs { 21 }
;; 22 succs { 24 23 }
;; 23 succs { 23 }
;; 24 succs { 25 }
;; 25 succs { 20 41 }
;; 26 succs { 28 27 }
;; 27 succs { 27 }
;; 28 succs { 30 29 }
;; 29 succs { 29 }
;; 30 succs { 31 32 }
;; 31 succs { 40 }
;; 32 succs { 33 40 }
;; 33 succs { 36 34 }
;; 34 succs { 36 35 }
;; 35 succs { 36 }
;; 36 succs { 39 37 }
;; 37 succs { 39 38 }
;; 38 succs { 39 }
;; 39 succs { 40 }
;; 40 succs { 41 }
;; 41 succs { 26 43 }
;; 42 succs { 43 }
;; 43 succs { 42 44 }
;; 44 succs { 1 }
cyclic probability of bb 3 is 1.000000 (capped to 0.990099); turning freq 0.500000 to 50.499996
cyclic probability of bb 5 is 1.000000 (capped to 0.990099); turning freq 0.250000 to 25.249998
cyclic probability of bb 7 is 1.000000 (capped to 0.990099); turning freq 0.125000 to 12.624999
cyclic probability of bb 9 is 1.000000 (capped to 0.990099); turning freq 0.062500 to 6.312500
cyclic probability of bb 13 is 0.890000; turning freq 0.031250 to 0.284091
cyclic probability of bb 11 is 1.000000 (capped to 0.990099); turning freq 0.031250 to 3.156250
cyclic probability of bb 19 is 0.222500; turning freq 0.031250 to 0.040193
cyclic probability of bb 25 is 0.222500; turning freq 0.004421 to 0.005686
cyclic probability of bb 15 is 1.000000 (capped to 0.990099); turning freq 0.017886 to 1.806471
cyclic probability of bb 41 is 0.222500; turning freq 0.000626 to 0.000805
cyclic probability of bb 17 is 1.000000 (capped to 0.990099); turning freq 0.008943 to 0.903235
cyclic probability of bb 21 is 1.000000 (capped to 0.990099); turning freq 0.002530 to 0.255578
cyclic probability of bb 43 is 0.890000; turning freq 0.000088 to 0.000805
cyclic probability of bb 23 is 1.000000 (capped to 0.990099); turning freq 0.001265 to 0.127789
cyclic probability of bb 27 is 1.000000 (capped to 0.990099); turning freq 0.000358 to 0.036159
cyclic probability of bb 29 is 1.000000 (capped to 0.990099); turning freq 0.000179 to 0.018079
Xrdc_Ip_Init_Privileged (const struct Xrdc_Ip_ConfigType * pXrdcConfig)
{
  uint32 Ret;
  uint32 D.6288;
  uint32 Ret;
  uint32 D.6285;
  uint32 u32SecureAtt;
  uint32 u32UserAtt;
  volatile boolean x;
  volatile boolean x;
  volatile boolean x;
  volatile boolean x;
  volatile boolean x;
  volatile boolean x;
  volatile boolean x;
  volatile boolean x;
  uint32 u32counter;
  volatile boolean x;
  volatile boolean x;
  volatile boolean x;
  _Bool _1;
  long unsigned int _2;
  _Bool _3;
  const struct Xrdc_Ip_MemConfigType * _4;
  _Bool _5;
  _Bool x.0_9;
  _Bool x.0_10;
  _Bool x.0_11;
  const struct Xrdc_Ip_PeripheralConfigType * _15;
  _Bool _16;
  _Bool x.0_17;
  const struct Xrdc_Ip_DomainConfigType * _18;
  _Bool _19;
  _Bool x.0_20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _25;
  const struct Xrdc_Ip_MemConfigType * _26;
  long unsigned int _28;
  const struct Xrdc_Ip_MemConfigType * _29;
  long unsigned int _31;
  const struct Xrdc_Ip_PeripheralConfigType * _32;
  long unsigned int _34;
  const struct Xrdc_Ip_PeripheralConfigType * _35;
  long unsigned int _37;
  const struct Xrdc_Ip_DomainConfigType * _38;
  long unsigned int _40;
  const struct Xrdc_Ip_DomainConfigType * _41;
  long unsigned int _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _48;
  _Bool _49;
  _Bool x.0_50;
  long unsigned int _51;
  _Bool _52;
  _Bool x.0_53;
  long unsigned int _54;
  long unsigned int _55;
  long unsigned int _56;
  long unsigned int _57;
  long unsigned int _58;
  long unsigned int _59;
  volatile uint32 * _60;
  long unsigned int _61;
  long unsigned int _62;
  long unsigned int _63;
  long unsigned int _64;
  long unsigned int _65;
  long unsigned int _66;
  long unsigned int _67;
  long unsigned int _68;
  long unsigned int _69;
  volatile uint32 * _70;
  long unsigned int _71;
  long unsigned int _72;
  long unsigned int _73;
  long unsigned int _74;
  long unsigned int _75;
  long unsigned int _76;
  long unsigned int _77;
  long unsigned int _78;
  volatile uint32 * _79;
  long unsigned int _80;
  long unsigned int _81;
  long unsigned int _82;
  long unsigned int _83;
  long unsigned int _84;
  long unsigned int _85;
  long unsigned int _86;
  long unsigned int _87;
  long unsigned int _88;
  long unsigned int _89;
  long unsigned int _90;
  long unsigned int _91;
  long unsigned int _92;
  volatile uint32 * _93;
  long unsigned int _94;
  long unsigned int _95;
  long unsigned int _96;
  long unsigned int _97;
  long unsigned int _98;
  long unsigned int _99;
  long unsigned int _100;
  volatile uint32 * _101;
  long unsigned int _102;
  long unsigned int _103;
  long unsigned int _104;
  long unsigned int _105;
  long unsigned int _106;
  _Bool _107;
  _Bool x.0_108;
  long unsigned int _109;
  _Bool _110;
  _Bool x.0_111;
  long unsigned int _112;
  long unsigned int _113;
  long unsigned int _114;
  long unsigned int _115;
  long unsigned int _116;
  long unsigned int _117;
  long unsigned int _118;
  long unsigned int _119;
  volatile uint32 * _120;
  long unsigned int _121;
  long unsigned int _122;
  long unsigned int _123;
  long unsigned int _124;
  long unsigned int _125;
  long unsigned int _126;
  long unsigned int _127;
  long unsigned int _128;
  long unsigned int _129;
  long unsigned int _130;
  long unsigned int _131;
  long unsigned int _132;
  long unsigned int _133;
  long unsigned int _134;
  long unsigned int _135;
  long unsigned int _136;
  volatile uint32 * _137;
  long unsigned int _138;
  long unsigned int _139;
  long unsigned int _140;
  long unsigned int _141;
  long unsigned int _142;
  long unsigned int _143;
  long unsigned int _144;
  long unsigned int _145;
  long unsigned int _146;
  volatile uint32 * _147;
  long unsigned int _148;
  long unsigned int _149;
  long unsigned int _150;
  long unsigned int _151;
  long unsigned int _152;
  _Bool _153;
  _Bool x.0_154;
  long unsigned int _155;
  _Bool _156;
  _Bool x.0_157;
  <unnamed type> _158;
  <unnamed type> _159;
  long unsigned int _160;
  long unsigned int _161;
  long unsigned int _162;
  long unsigned int _163;
  long unsigned int _164;
  long unsigned int _165;
  long unsigned int _166;
  long unsigned int _167;
  long unsigned int _168;
  <unnamed type> _169;
  long unsigned int _170;
  long unsigned int _171;
  long unsigned int _172;
  long unsigned int _173;
  long unsigned int _174;
  long unsigned int _175;
  volatile uint32 * _176;
  long unsigned int _177;
  <unnamed type> _178;
  long unsigned int _179;
  <unnamed type> _180;
  long unsigned int _181;
  long unsigned int _182;
  volatile uint32 * _183;
  long unsigned int _184;
  <unnamed type> _185;
  <unnamed type> _187;
  <unnamed type> _189;
  long unsigned int _190;
  long unsigned int _191;
  volatile uint32 * _192;
  long unsigned int _193;
  long unsigned int _194;
  long unsigned int _195;
  long unsigned int _196;

  <bb 2> [local count: 21262216]:
  # DEBUG BEGIN_STMT
  # DEBUG u32counter => 0
  # DEBUG BEGIN_STMT
  _1 = pXrdcConfig_7(D) != 0B;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_11 ={v} x;
  if (x.0_11 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 10631108]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = pXrdcConfig_7(D)->u32DomainConfigCnt;
  _3 = _2 != 0;
  x ={v} _3;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_10 ={v} x;
  if (x.0_10 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 5315554]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _4 = pXrdcConfig_7(D)->pMemoryDesConfig;
  _5 = _4 != 0B;
  x ={v} _5;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_9 ={v} x;
  if (x.0_9 != 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 7> [local count: 268435456]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 7>; [100.00%]

  <bb 8> [local count: 2657777]:
  # DEBUG pXrdcConfig => pXrdcConfig_7(D)
  # DEBUG INLINE_ENTRY Xrdc_Ip_Init_Privileged
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _15 = pXrdcConfig_7(D)->pPeripheralDescriptorConfig;
  _16 = _15 != 0B;
  x ={v} _16;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_17 ={v} x;
  if (x.0_17 != 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 9> [local count: 134217728]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 9>; [100.00%]

  <bb 10> [local count: 1328889]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _18 = pXrdcConfig_7(D)->pDomainConfig;
  _19 = _18 != 0B;
  x ={v} _19;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_20 ={v} x;
  if (x.0_20 != 0)
    goto <bb 13>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 11> [local count: 67108864]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 11>; [100.00%]

  <bb 12> [local count: 5375958]:
  # DEBUG BEGIN_STMT
  _21 ={v} MEM[(volatile uint32 *)1076330496B];
  _22 = _21 & 4294967294;
  MEM[(volatile uint32 *)1076330496B] ={v} _22;
  # DEBUG BEGIN_STMT
  u32counter_24 = u32counter_23 + 1;
  # DEBUG u32counter => u32counter_24

  <bb 13> [local count: 6040402]:
  # u32counter_23 = PHI <0(10), u32counter_24(12)>
  # DEBUG x => NULL
  # DEBUG u32counter => u32counter_23
  # DEBUG BEGIN_STMT
  _25 = pXrdcConfig_7(D)->u32InstanceInUsedCnt;
  if (u32counter_23 < _25)
    goto <bb 12>; [89.00%]
  else
    goto <bb 19>; [11.00%]

  <bb 14> [local count: 760586]:
  # DEBUG BEGIN_STMT
  _26 = pXrdcConfig_7(D)->pMemoryDesConfig;
  _28 = u32counter_27 * 40;
  _29 = _26 + _28;
  # DEBUG pXrdcMemDescriptor => _29
  # DEBUG INLINE_ENTRY Xrdc_Memory_Config_Descriptor
  # DEBUG BEGIN_STMT
  _49 = _29 != 0B;
  x ={v} _49;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_50 ={v} x;
  if (x.0_50 != 0)
    goto <bb 16>; [50.00%]
  else
    goto <bb 15>; [50.00%]

  <bb 15> [local count: 38409575]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 15>; [100.00%]

  <bb 16> [local count: 380293]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _51 = _29->u32XrdcInstance;
  _52 = _51 == 0;
  x ={v} _52;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_53 ={v} x;
  if (x.0_53 != 0)
    goto <bb 18>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 17> [local count: 19204787]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 17>; [100.00%]

  <bb 18> [local count: 190146]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  _54 = _29->u32XrdcMrcInstance;
  _55 = _54 << 4;
  _56 = _29->u32XrdcMrcRegionDescriptor;
  _57 = _55 + _56;
  _58 = _57 * 32;
  _59 = _58 + 1076338700;
  _60 = (volatile uint32 *) _59;
  _61 ={v} *_60;
  _62 = _61 & 2147483647;
  *_60 ={v} _62;
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  _63 = _29->u32XrdcStartAddress;
  _64 = _29->u32XrdcMrcInstance;
  _65 = _64 << 4;
  _66 = _29->u32XrdcMrcRegionDescriptor;
  _67 = _65 + _66;
  _68 = _67 * 32;
  _69 = _68 + 1076338688;
  _70 = (volatile uint32 *) _69;
  _71 = _63 | 1;
  *_70 ={v} _71;
  # DEBUG BEGIN_STMT
  _72 = _29->u32XrdcEndAddress;
  _73 = _29->u32XrdcMrcInstance;
  _74 = _73 << 4;
  _75 = _29->u32XrdcMrcRegionDescriptor;
  _76 = _74 + _75;
  _77 = _76 * 32;
  _78 = _77 + 1076338692;
  _79 = (volatile uint32 *) _78;
  _80 = _72 | 1;
  *_79 ={v} _80;
  # DEBUG BEGIN_STMT
  _81 = _29->u32XrdcSema4Enable;
  _82 = _29->u32XrdcSema4Number;
  _83 = _82 << 24;
  _84 = _83 & 251658240;
  _85 = _81 | _84;
  _86 = _29->u32XrdcMemPolicy;
  _87 = _29->u32XrdcMrcInstance;
  _88 = _87 << 4;
  _89 = _29->u32XrdcMrcRegionDescriptor;
  _90 = _88 + _89;
  _91 = _90 * 32;
  _92 = _91 + 1076338696;
  _93 = (volatile uint32 *) _92;
  _94 = _85 | _86;
  *_93 ={v} _94;
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  _95 = _29->u32XrdcMrcInstance;
  _96 = _95 << 4;
  _97 = _29->u32XrdcMrcRegionDescriptor;
  _98 = _96 + _97;
  _99 = _98 * 32;
  _100 = _99 + 1076338700;
  _101 = (volatile uint32 *) _100;
  _102 ={v} *_101;
  _103 = _102 & 2130706432;
  _104 = _29->u32XrdcMemPolicy1;
  _105 = _103 | _104;
  _106 = _105 | 2147483648;
  *_101 ={v} _106;
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG pXrdcMemDescriptor => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  u32counter_30 = u32counter_27 + 1;
  # DEBUG u32counter => u32counter_30

  <bb 19> [local count: 854591]:
  # u32counter_27 = PHI <0(13), u32counter_30(18)>
  # DEBUG u32counter => u32counter_27
  # DEBUG BEGIN_STMT
  _31 = pXrdcConfig_7(D)->u32MemoryConfigCnt;
  if (u32counter_27 < _31)
    goto <bb 14>; [89.00%]
  else
    goto <bb 25>; [11.00%]

  <bb 20> [local count: 107607]:
  # DEBUG BEGIN_STMT
  _32 = pXrdcConfig_7(D)->pPeripheralDescriptorConfig;
  _34 = u32counter_33 * 24;
  _35 = _32 + _34;
  # DEBUG pXrdcPerDescriptor => _35
  # DEBUG INLINE_ENTRY Xrdc_Peripheral_Access_Config
  # DEBUG BEGIN_STMT
  _107 = _35 != 0B;
  x ={v} _107;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_108 ={v} x;
  if (x.0_108 != 0)
    goto <bb 22>; [50.00%]
  else
    goto <bb 21>; [50.00%]

  <bb 21> [local count: 5434152]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 21>; [100.00%]

  <bb 22> [local count: 53803]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _109 = _35->u32XrdcInstance;
  _110 = _109 == 0;
  x ={v} _110;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_111 ={v} x;
  if (x.0_111 != 0)
    goto <bb 24>; [50.00%]
  else
    goto <bb 23>; [50.00%]

  <bb 23> [local count: 2717076]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 23>; [100.00%]

  <bb 24> [local count: 26902]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  _112 = _35->u32XrdcPdacInstance;
  _113 = _112 >> 7;
  _114 = _113 * 1024;
  _115 = _114 + 1076330496;
  _116 = _112 << 3;
  _117 = _116 & 1016;
  _118 = _115 + _117;
  _119 = _118 + 4100;
  _120 = (volatile uint32 *) _119;
  _121 ={v} *_120;
  _122 = _121 & 2147483647;
  *_120 ={v} _122;
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  _123 = _35->u32XrdcSema4Enable;
  _124 = _35->u32XrdcSema4Number;
  _125 = _124 << 24;
  _126 = _125 & 251658240;
  _127 = _123 | _126;
  _128 = _35->u32XrdcPerPolicy;
  _129 = _35->u32XrdcPdacInstance;
  _130 = _129 >> 7;
  _131 = _130 * 1024;
  _132 = _131 + 1076330496;
  _133 = _129 << 3;
  _134 = _133 & 1016;
  _135 = _132 + _134;
  _136 = _135 + 4096;
  _137 = (volatile uint32 *) _136;
  _138 = _127 | _128;
  *_137 ={v} _138;
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  _139 = _35->u32XrdcPdacInstance;
  _140 = _139 >> 7;
  _141 = _140 * 1024;
  _142 = _141 + 1076330496;
  _143 = _139 << 3;
  _144 = _143 & 1016;
  _145 = _142 + _144;
  _146 = _145 + 4100;
  _147 = (volatile uint32 *) _146;
  _148 ={v} *_147;
  _149 = _148 & 2130706432;
  _150 = _35->u32XrdcPerPolicy1;
  _151 = _149 | _150;
  _152 = _151 | 2147483648;
  *_147 ={v} _152;
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG pXrdcPerDescriptor => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  u32counter_36 = u32counter_33 + 1;
  # DEBUG u32counter => u32counter_36

  <bb 25> [local count: 120907]:
  # u32counter_33 = PHI <0(19), u32counter_36(24)>
  # DEBUG u32counter => u32counter_33
  # DEBUG BEGIN_STMT
  _37 = pXrdcConfig_7(D)->u32PeripheralConfigCnt;
  if (u32counter_33 < _37)
    goto <bb 20>; [89.00%]
  else
    goto <bb 41>; [11.00%]

  <bb 26> [local count: 15224]:
  # DEBUG BEGIN_STMT
  _38 = pXrdcConfig_7(D)->pDomainConfig;
  _40 = u32counter_39 * 44;
  _41 = _38 + _40;
  # DEBUG pDomainConfig => _41
  # DEBUG INLINE_ENTRY Xrdc_Domain_Init
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _153 = _41 != 0B;
  x ={v} _153;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_154 ={v} x;
  if (x.0_154 != 0)
    goto <bb 28>; [50.00%]
  else
    goto <bb 27>; [50.00%]

  <bb 27> [local count: 768819]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 27>; [100.00%]

  <bb 28> [local count: 7612]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _155 = _41->u32XrdcInstance;
  _156 = _155 == 0;
  x ={v} _156;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_157 ={v} x;
  if (x.0_157 != 0)
    goto <bb 30>; [50.00%]
  else
    goto <bb 29>; [50.00%]

  <bb 29> [local count: 384409]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 29>; [100.00%]

  <bb 30> [local count: 3806]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _158 = _41->XrdcCoreMdacInstance;
  if (_158 == 0)
    goto <bb 31>; [50.00%]
  else
    goto <bb 32>; [50.00%]

  <bb 31> [local count: 1903]:
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  _159 = _41->u32XrdcDomainID;
  _160 = _159 & 7;
  _161 = _41->u32XrdcProcessIDEnable;
  _162 = _160 | _161;
  _163 = _41->u32XrdcProcessID;
  _164 = _163 << 16;
  _165 = _162 | _164;
  _166 = _41->u32XrdcProcessIDMask;
  _167 = _166 << 8;
  _168 = _165 | _167;
  _169 = _41->XrdcMdacInstance;
  _170 = _169 << 5;
  _171 = _170 + 1076330496;
  _172 = _41->u32XrdcWordDescriptor;
  _173 = _172 << 2;
  _174 = _171 + _173;
  _175 = _174 + 2048;
  _176 = (volatile uint32 *) _175;
  _177 = _168 | 2147483648;
  *_176 ={v} _177;
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  goto <bb 40>; [100.00%]

  <bb 32> [local count: 1903]:
  # DEBUG BEGIN_STMT
  if (_158 == 1)
    goto <bb 33>; [34.00%]
  else
    goto <bb 40>; [66.00%]

  <bb 33> [local count: 647]:
  # DEBUG BEGIN_STMT
  _178 = _41->u32XrdcDomainID;
  _179 = _178 & 7;
  _180 = _41->XrdcMdacInstance;
  _181 = _180 << 5;
  _182 = _181 + 1076332544;
  _183 = (volatile uint32 *) _182;
  _184 = _179 | 2684354560;
  *_183 ={v} _184;
  # DEBUG BEGIN_STMT
  _185 = _41->eXrdcSecureOutput;
  # DEBUG eXrdcSecure => _185
  # DEBUG INLINE_ENTRY Xrdc_Get_Secure_Attribute
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (_185 == 1)
    goto <bb 36>; [21.72%]
  else
    goto <bb 34>; [78.28%]

  <bb 34> [local count: 506]:
  # DEBUG BEGIN_STMT
  if (_185 == 0)
    goto <bb 36>; [65.00%]
  else
    goto <bb 35>; [35.00%]

  <bb 35> [local count: 177]:
  # DEBUG BEGIN_STMT
  # DEBUG Ret => 192

  <bb 36> [local count: 647]:
  # Ret_198 = PHI <64(33), 0(34), 192(35)>
  # DEBUG Ret => Ret_198
  # DEBUG BEGIN_STMT
  _215 = Ret_198;
  # DEBUG eXrdcSecure => NULL
  # DEBUG Ret => NULL
  u32SecureAtt_186 = _215;
  # DEBUG u32SecureAtt => u32SecureAtt_186
  # DEBUG BEGIN_STMT
  _187 = _41->eXrdcPriviledgeOutput;
  # DEBUG eXrdcPriviledge => _187
  # DEBUG INLINE_ENTRY Xrdc_Get_Priviledge_Attribute
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (_187 == 0)
    goto <bb 39>; [50.00%]
  else
    goto <bb 37>; [50.00%]

  <bb 37> [local count: 324]:
  # DEBUG BEGIN_STMT
  if (_187 == 1)
    goto <bb 39>; [34.00%]
  else
    goto <bb 38>; [66.00%]

  <bb 38> [local count: 214]:
  # DEBUG BEGIN_STMT
  # DEBUG Ret => 48

  <bb 39> [local count: 647]:
  # Ret_197 = PHI <0(36), 16(37), 48(38)>
  # DEBUG Ret => Ret_197
  # DEBUG BEGIN_STMT
  _216 = Ret_197;
  # DEBUG eXrdcPriviledge => NULL
  # DEBUG Ret => NULL
  u32UserAtt_188 = _216;
  # DEBUG u32UserAtt => u32UserAtt_188
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  _189 = _41->XrdcMdacInstance;
  _190 = _189 << 5;
  _191 = _190 + 1076332544;
  _192 = (volatile uint32 *) _191;
  _193 ={v} *_192;
  _194 = _193 & 4294967055;
  _195 = u32SecureAtt_186 | u32UserAtt_188;
  _196 = _194 | _195;
  *_192 ={v} _196;
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");

  <bb 40> [local count: 3806]:
  # DEBUG BEGIN_STMT
  # DEBUG pDomainConfig => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG u32UserAtt => NULL
  # DEBUG u32SecureAtt => NULL
  # DEBUG BEGIN_STMT
  u32counter_42 = u32counter_39 + 1;
  # DEBUG u32counter => u32counter_42

  <bb 41> [local count: 17106]:
  # u32counter_39 = PHI <0(25), u32counter_42(40)>
  # DEBUG u32counter => u32counter_39
  # DEBUG BEGIN_STMT
  _43 = pXrdcConfig_7(D)->u32DomainConfigCnt;
  if (u32counter_39 < _43)
    goto <bb 26>; [89.00%]
  else
    goto <bb 43>; [11.00%]

  <bb 42> [local count: 15224]:
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  _44 ={v} MEM[(volatile uint32 *)1076330496B];
  _45 = _44 | 1;
  MEM[(volatile uint32 *)1076330496B] ={v} _45;
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  u32counter_47 = u32counter_46 + 1;
  # DEBUG u32counter => u32counter_47

  <bb 43> [local count: 17106]:
  # u32counter_46 = PHI <0(41), u32counter_47(42)>
  # DEBUG u32counter => u32counter_46
  # DEBUG BEGIN_STMT
  _48 = pXrdcConfig_7(D)->u32InstanceInUsedCnt;
  if (u32counter_46 < _48)
    goto <bb 42>; [89.00%]
  else
    goto <bb 44>; [11.00%]

  <bb 44> [local count: 1882]:
  # DEBUG pXrdcConfig => NULL
  # DEBUG u32counter => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  return;

}



;; Function Xrdc_Ip_SetProcessID_Privileged (Xrdc_Ip_SetProcessID_Privileged, funcdef_no=9, decl_uid=5975, cgraph_uid=10, symbol_order=11)


Symbols to be put in SSA form
{ D.6150 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 22
Number of blocks to update: 21 ( 95%)


Merging blocks 3 and 14
Merging blocks 5 and 13
Merging blocks 7 and 12
Removing basic block 8
Removing basic block 9
Removing basic block 10
Removing basic block 11
Removing basic block 16
Merging blocks 21 and 15
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12
;;
;; Loop 1
;;  header 7, latch 7
;;  depth 1, outer 0
;;  nodes: 7
;;
;; Loop 2
;;  header 5, latch 5
;;  depth 1, outer 0
;;  nodes: 5
;;
;; Loop 3
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 6 5 }
;; 5 succs { 5 }
;; 6 succs { 8 7 }
;; 7 succs { 7 }
;; 8 succs { 9 12 }
;; 9 succs { 10 11 }
;; 10 succs { 12 }
;; 11 succs { 12 }
;; 12 succs { 1 }
cyclic probability of bb 3 is 1.000000 (capped to 0.990099); turning freq 0.500000 to 50.499996
cyclic probability of bb 5 is 1.000000 (capped to 0.990099); turning freq 0.250000 to 25.249998
cyclic probability of bb 7 is 1.000000 (capped to 0.990099); turning freq 0.125000 to 12.624999
Xrdc_Ip_SetProcessID_Privileged (uint8 u8MasterCore, uint8 u8Pid, Xrdc_Ip_SecureAttributeType eSecureAttr)
{
  volatile boolean x;
  volatile boolean x;
  volatile boolean x;
  _Bool _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool x.0_10;
  _Bool x.0_11;
  _Bool x.0_12;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  volatile uint32 * _22;
  long unsigned int _23;
  long unsigned int _24;
  unsigned char _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  volatile uint32 * _31;
  long unsigned int _32;
  long unsigned int _33;
  unsigned char _34;
  long unsigned int _35;
  long unsigned int _36;

  <bb 2> [local count: 21262216]:
  # DEBUG BEGIN_STMT
  _1 = u8MasterCore_6(D) <= 4;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_12 ={v} x;
  if (x.0_12 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 10631108]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = u8Pid_8(D) <= 30;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_11 ={v} x;
  if (x.0_11 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 5315554]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 = (int) u8MasterCore_6(D);
  _4 = g_bAvailablePidRegisters[_3];
  x ={v} _4;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_10 ={v} x;
  if (x.0_10 != 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 7> [local count: 268435456]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 7>; [100.00%]

  <bb 8> [local count: 2657777]:
  # DEBUG u8MasterCore => u8MasterCore_6(D)
  # DEBUG u8Pid => u8Pid_8(D)
  # DEBUG eSecureAttr => eSecureAttr_9(D)
  # DEBUG INLINE_ENTRY Xrdc_Ip_SetProcessID_Privileged
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _16 ={v} MEM[(volatile uint32 *)1076330744B];
  _17 = (long unsigned int) u8MasterCore_6(D);
  _18 = _16 >> _17;
  _19 = _18 & 1;
  if (_19 == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 9> [local count: 1328889]:
  # DEBUG BEGIN_STMT
  if (eSecureAttr_9(D) == 1)
    goto <bb 10>; [34.00%]
  else
    goto <bb 11>; [66.00%]

  <bb 10> [local count: 451822]:
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  SchM_Enter_Rm_RM_EXCLUSIVE_AREA_00 ();
  # DEBUG BEGIN_STMT
  _20 = _17 << 2;
  _21 = _20 + 1076332288;
  _22 = (volatile uint32 *) _21;
  _23 ={v} *_22;
  _24 = _23 & 4294967232;
  _25 = u8Pid_8(D) & 31;
  _26 = (long unsigned int) _25;
  _27 = _24 | _26;
  _28 = _27 | 32;
  *_22 ={v} _28;
  # DEBUG BEGIN_STMT
  SchM_Exit_Rm_RM_EXCLUSIVE_AREA_00 ();
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  goto <bb 12>; [100.00%]

  <bb 11> [local count: 877066]:
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  SchM_Enter_Rm_RM_EXCLUSIVE_AREA_00 ();
  # DEBUG BEGIN_STMT
  _29 = _17 << 2;
  _30 = _29 + 1076332288;
  _31 = (volatile uint32 *) _30;
  _32 ={v} *_31;
  _33 = _32 & 4294967232;
  _34 = u8Pid_8(D) & 31;
  _35 = (long unsigned int) _34;
  _36 = _33 | _35;
  *_31 ={v} _36;
  # DEBUG BEGIN_STMT
  SchM_Exit_Rm_RM_EXCLUSIVE_AREA_00 ();
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");

  <bb 12> [local count: 2657777]:
  # DEBUG u8MasterCore => NULL
  # DEBUG u8Pid => NULL
  # DEBUG eSecureAttr => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  return;

}



;; Function Xrdc_Ip_LockProcessID_Privileged (Xrdc_Ip_LockProcessID_Privileged, funcdef_no=10, decl_uid=5977, cgraph_uid=11, symbol_order=12)


Symbols to be put in SSA form
{ D.6151 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 14
Number of blocks to update: 13 ( 93%)


Merging blocks 3 and 10
Merging blocks 5 and 9
Removing basic block 6
Removing basic block 7
Removing basic block 8
Removing basic block 12
Merging blocks 13 and 11
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;;
;; Loop 1
;;  header 5, latch 5
;;  depth 1, outer 0
;;  nodes: 5
;;
;; Loop 2
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 6 5 }
;; 5 succs { 5 }
;; 6 succs { 1 }
cyclic probability of bb 3 is 1.000000 (capped to 0.990099); turning freq 0.500000 to 50.499996
cyclic probability of bb 5 is 1.000000 (capped to 0.990099); turning freq 0.250000 to 25.249998
Xrdc_Ip_LockProcessID_Privileged (uint8 u8MasterCore)
{
  volatile boolean x;
  volatile boolean x;
  _Bool _1;
  int _2;
  _Bool _3;
  _Bool x.0_7;
  _Bool x.0_8;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  volatile uint32 * _14;
  long unsigned int _15;
  long unsigned int _16;

  <bb 2> [local count: 21262216]:
  # DEBUG BEGIN_STMT
  _1 = u8MasterCore_5(D) <= 4;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_8 ={v} x;
  if (x.0_8 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 10631108]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = (int) u8MasterCore_5(D);
  _3 = g_bAvailablePidRegisters[_2];
  x ={v} _3;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_7 ={v} x;
  if (x.0_7 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 5315554]:
  # DEBUG u8MasterCore => u8MasterCore_5(D)
  # DEBUG INLINE_ENTRY Xrdc_Ip_LockProcessID_Privileged
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  _11 = (long unsigned int) u8MasterCore_5(D);
  _12 = _11 << 2;
  _13 = _12 + 1076332288;
  _14 = (volatile uint32 *) _13;
  _15 ={v} *_14;
  _16 = _15 | 1610612736;
  *_14 ={v} _16;
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG u8MasterCore => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  return;

}



;; Function Xrdc_Ip_GetDomainIDErrorStatus_Privileged (Xrdc_Ip_GetDomainIDErrorStatus_Privileged, funcdef_no=12, decl_uid=5971, cgraph_uid=13, symbol_order=14)


Symbols to be put in SSA form
{ D.6152 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 21
Number of blocks to update: 20 ( 95%)


Merging blocks 3 and 10
Merging blocks 5 and 9
Removing basic block 6
Removing basic block 7
Removing basic block 8
Removing basic block 12
Removing basic block 13
Removing basic block 20
;; 7 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12
;;
;; Loop 5
;;  header 11, latch 10
;;  depth 1, outer 0
;;  nodes: 11 10
;;
;; Loop 6
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7
;;
;; Loop 3
;;  header 5, latch 5
;;  depth 1, outer 0
;;  nodes: 5
;;
;; Loop 4
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 6 5 }
;; 5 succs { 5 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 10 12 }
;; 12 succs { 1 }
cyclic probability of bb 3 is 1.000000 (capped to 0.990099); turning freq 0.500000 to 50.499996
cyclic probability of bb 5 is 1.000000 (capped to 0.990099); turning freq 0.250000 to 25.249998
cyclic probability of bb 8 is 0.890000; turning freq 0.250000 to 2.272727
cyclic probability of bb 11 is 0.890000; turning freq 0.250000 to 2.272727
Xrdc_Ip_GetDomainIDErrorStatus_Privileged (uint32 u32Instance, struct Xrdc_Ip_DomainIDErrStatusType * pXrdcDomainIDErrorStatus)
{
  uint8 u8counter;
  uint8 u8PACInstanceNumber;
  uint8 u8MCRInstanceNumber;
  volatile boolean x;
  volatile boolean x;
  _Bool _1;
  _Bool _2;
  _Bool x.0_7;
  _Bool x.0_8;
  long unsigned int _11;
  long unsigned int _12;
  unsigned char _13;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  volatile uint32 * _20;
  long unsigned int _22;
  long unsigned int _23;
  unsigned char _24;
  unsigned char _25;
  unsigned char _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  volatile uint32 * _32;

  <bb 2> [local count: 21262216]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = u32Instance_4(D) == 0;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_8 ={v} x;
  if (x.0_8 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 10631108]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = pXrdcDomainIDErrorStatus_6(D) != 0B;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_7 ={v} x;
  if (x.0_7 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 5315554]:
  # DEBUG pXrdcDomainIDErrorStatus => pXrdcDomainIDErrorStatus_6(D)
  # DEBUG INLINE_ENTRY Xrdc_Ip_GetDomainIDErrorStatus_Privileged
  # DEBUG D#2 => D#1
  # DEBUG u32Instance => D#2
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _11 ={v} MEM[(volatile uint32 *)1076330736B];
  _12 = _11 >> 16;
  _13 = (unsigned char) _12;
  u8MCRInstanceNumber_14 = _13 + 1;
  # DEBUG u8MCRInstanceNumber => u8MCRInstanceNumber_14
  # DEBUG BEGIN_STMT
  # DEBUG u8counter => 0
  goto <bb 8>; [100.00%]

  <bb 7> [local count: 43007664]:
  # DEBUG BEGIN_STMT
  # DEBUG D#3 => NULL
  Xrdc_Ip_GetDetailError.constprop (u8counter_16, pXrdcDomainIDErrorStatus_6(D));
  # DEBUG BEGIN_STMT
  _17 = (long unsigned int) u8counter_16;
  _18 = _17 << 4;
  _19 = _18 + 1076331532;
  _20 = (volatile uint32 *) _19;
  *_20 ={v} 1073741824;
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  u8counter_21 = u8counter_16 + 1;
  # DEBUG u8counter => u8counter_21

  <bb 8> [local count: 48323218]:
  # u8counter_16 = PHI <0(6), u8counter_21(7)>
  # DEBUG u8counter => u8counter_16
  # DEBUG BEGIN_STMT
  if (u8MCRInstanceNumber_14 > u8counter_16)
    goto <bb 7>; [89.00%]
  else
    goto <bb 9>; [11.00%]

  <bb 9> [local count: 5315554]:
  # DEBUG BEGIN_STMT
  _22 ={v} MEM[(volatile uint32 *)1076330736B];
  _23 = _22 >> 24;
  _24 = (unsigned char) _23;
  _25 = _24 & 15;
  u8PACInstanceNumber_26 = _25 + 1;
  # DEBUG u8PACInstanceNumber => u8PACInstanceNumber_26
  # DEBUG BEGIN_STMT
  # DEBUG u8counter => 0
  goto <bb 11>; [100.00%]

  <bb 10> [local count: 43007664]:
  # DEBUG BEGIN_STMT
  _28 = u8counter_27 + 16;
  # DEBUG D#3 => NULL
  Xrdc_Ip_GetDetailError.constprop (_28, pXrdcDomainIDErrorStatus_6(D));
  # DEBUG BEGIN_STMT
  _29 = (long unsigned int) u8counter_27;
  _30 = _29 << 4;
  _31 = _30 + 1076331532;
  _32 = (volatile uint32 *) _31;
  *_32 ={v} 1073741824;
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  u8counter_33 = u8counter_27 + 1;
  # DEBUG u8counter => u8counter_33

  <bb 11> [local count: 48323218]:
  # u8counter_27 = PHI <0(9), u8counter_33(10)>
  # DEBUG u8counter => u8counter_27
  # DEBUG BEGIN_STMT
  if (u8PACInstanceNumber_26 > u8counter_27)
    goto <bb 10>; [89.00%]
  else
    goto <bb 12>; [11.00%]

  <bb 12> [local count: 5315554]:
  # DEBUG pXrdcDomainIDErrorStatus => NULL
  # DEBUG x => NULL
  # DEBUG x => NULL
  # DEBUG u8MCRInstanceNumber => NULL
  # DEBUG u8PACInstanceNumber => NULL
  # DEBUG u8counter => NULL
  # DEBUG u32Instance => NULL
  return;

}



;; Function Xrdc_Ip_Init (Xrdc_Ip_Init, funcdef_no=13, decl_uid=5935, cgraph_uid=14, symbol_order=15)

Xrdc_Ip_Init (const struct Xrdc_Ip_ConfigType * pXrdcConfig)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Xrdc_Ip_Init_Privileged (pXrdcConfig_2(D));
  return;

}



;; Function Xrdc_Ip_GetDomainID (Xrdc_Ip_GetDomainID, funcdef_no=14, decl_uid=5937, cgraph_uid=15, symbol_order=16)

Xrdc_Ip_GetDomainID (uint32 u32Instance)
{
  uint32 _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = Xrdc_Ip_GetDomainID_Privileged (u32Instance_2(D));
  return _4;

}



;; Function Xrdc_Ip_SetProcessID (Xrdc_Ip_SetProcessID, funcdef_no=15, decl_uid=5941, cgraph_uid=16, symbol_order=17)

Xrdc_Ip_SetProcessID (uint8 u8MasterCore, uint8 u8Pid, Xrdc_Ip_SecureAttributeType eSecureAttr)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Xrdc_Ip_SetProcessID_Privileged (u8MasterCore_2(D), u8Pid_3(D), eSecureAttr_4(D));
  return;

}



;; Function Xrdc_Ip_LockProcessID (Xrdc_Ip_LockProcessID, funcdef_no=16, decl_uid=5943, cgraph_uid=17, symbol_order=18)

Xrdc_Ip_LockProcessID (uint8 u8MasterCore)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Xrdc_Ip_LockProcessID_Privileged (u8MasterCore_2(D));
  return;

}



;; Function Xrdc_Ip_GetDomainIDErrorStatus (Xrdc_Ip_GetDomainIDErrorStatus, funcdef_no=17, decl_uid=5946, cgraph_uid=18, symbol_order=19)

Xrdc_Ip_GetDomainIDErrorStatus (uint32 u32Instance, struct Xrdc_Ip_DomainIDErrStatusType * pXrdcDomainIDErrorStatus)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Xrdc_Ip_GetDomainIDErrorStatus_Privileged (u32Instance_2(D), pXrdcDomainIDErrorStatus_3(D));
  return;

}


