Clock_Ip_CMU_ClockFailInt ()
{
  uint32 IndexCmu;
  uint32 CmuIsrValue;
  uint32 CmuIerValue;
  struct Clock_Ip_ClockMonitorType * _1;
  long unsigned int _2;
  struct Clock_Ip_ClockMonitorType * _3;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.0_4;
  struct Clock_Ip_ClockMonitorType * _5;
  long unsigned int _6;
  <unnamed type> _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  IndexCmu_11 = 0;
  # DEBUG IndexCmu => IndexCmu_11
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_apxCmu[IndexCmu_8];
  _2 ={v} _1->SR;
  CmuIsrValue_13 = _2 & 3;
  # DEBUG CmuIsrValue => CmuIsrValue_13
  # DEBUG BEGIN_STMT
  _3 = Clock_Ip_apxCmu[IndexCmu_8];
  _3->SR ={v} CmuIsrValue_13;
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.0_4 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.0_4 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_apxCmu[IndexCmu_8];
  _6 = _5->IER;
  CmuIerValue_15 = _6 & 3;
  # DEBUG CmuIerValue => CmuIerValue_15
  # DEBUG BEGIN_STMT
  CmuIsrValue_16 = CmuIsrValue_13 & CmuIerValue_15;
  # DEBUG CmuIsrValue => CmuIsrValue_16
  # DEBUG BEGIN_STMT
  if (CmuIsrValue_16 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _7 = Clock_Ip_aeCmuNames[IndexCmu_8];
  Clock_Ip_ReportClockErrors (0, _7);

  <bb 6> :
  # DEBUG BEGIN_STMT
  IndexCmu_18 = IndexCmu_8 + 1;
  # DEBUG IndexCmu => IndexCmu_18

  <bb 7> :
  # IndexCmu_8 = PHI <IndexCmu_11(2), IndexCmu_18(6)>
  # DEBUG IndexCmu => IndexCmu_8
  # DEBUG BEGIN_STMT
  if (IndexCmu_8 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Clock_Ip_CMU_GetInterruptStatus (uint8 IndexCmu)
{
  uint32 CmuIsrValue;
  int _1;
  struct Clock_Ip_ClockMonitorType * _2;
  long unsigned int _3;
  uint32 _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) IndexCmu_4(D);
  _2 = Clock_Ip_apxCmu[_1];
  _3 ={v} _2->SR;
  CmuIsrValue_6 = _3 & 3;
  # DEBUG CmuIsrValue => CmuIsrValue_6
  # DEBUG BEGIN_STMT
  _7 = CmuIsrValue_6;
  return _7;

}


Clock_Ip_EnableCmuFcFceRefCntLfrefHfref (const struct Clock_Ip_CmuConfigType * Config)
{
  struct Clock_Ip_ClockMonitorType * const CmuFc;
  const struct Clock_Ip_CmuInfoType * CmuInformation;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config_11(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][8];
  _3 = (int) _2;
  CmuInformation_12 = &Clock_Ip_axCmuInfo[_3];
  # DEBUG CmuInformation => CmuInformation_12
  # DEBUG BEGIN_STMT
  CmuFc_13 = CmuInformation_12->CmuInstance;
  # DEBUG CmuFc => CmuFc_13
  # DEBUG BEGIN_STMT
  _4 = Config_11(D)->Enable;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = CmuFc_13->GCR;
  _6 = _5 | 1;
  CmuFc_13->GCR = _6;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = CmuFc_13->GCR;
  _8 = _7 & 4294967294;
  CmuFc_13->GCR = _8;

  <bb 5> :
  return;

}


Clock_Ip_GetStatusCmuFcFceRefCntLfrefHfref (Clock_Ip_NameType Name)
{
  uint32 CmuIsrValue;
  uint32 CmuIerValue;
  Clock_Ip_CmuStatusType Status;
  const struct Clock_Ip_ClockMonitorType * CmuFc;
  const struct Clock_Ip_CmuInfoType * CmuInformation;
  unsigned char _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  Clock_Ip_CmuStatusType _21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[Name_11(D)][8];
  _2 = (int) _1;
  CmuInformation_12 = &Clock_Ip_axCmuInfo[_2];
  # DEBUG CmuInformation => CmuInformation_12
  # DEBUG BEGIN_STMT
  CmuFc_13 = CmuInformation_12->CmuInstance;
  # DEBUG CmuFc => CmuFc_13
  # DEBUG BEGIN_STMT
  Status_14 = 3;
  # DEBUG Status => Status_14
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 ={v} CmuFc_13->SR;
  CmuIsrValue_15 = _3 & 3;
  # DEBUG CmuIsrValue => CmuIsrValue_15
  # DEBUG BEGIN_STMT
  _4 = CmuFc_13->IER;
  CmuIerValue_16 = _4 & 3;
  # DEBUG CmuIerValue => CmuIerValue_16
  # DEBUG BEGIN_STMT
  CmuIsrValue_17 = CmuIsrValue_15 & CmuIerValue_16;
  # DEBUG CmuIsrValue => CmuIsrValue_17
  # DEBUG BEGIN_STMT
  _5 = CmuFc_13->GCR;
  _6 = _5 & 1;
  if (_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _7 = CmuIsrValue_17 & 2;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Status_20 = 1;
  # DEBUG Status => Status_20
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = CmuIsrValue_17 & 1;
  if (_8 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Status_19 = 2;
  # DEBUG Status => Status_19
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Status_18 = 0;
  # DEBUG Status => Status_18

  <bb 8> :
  # Status_9 = PHI <Status_14(2), Status_20(4), Status_19(6), Status_18(7)>
  # DEBUG Status => Status_9
  # DEBUG BEGIN_STMT
  _21 = Status_9;
  return _21;

}


Clock_Ip_ClearStatusCmuFcFceRefCntLfrefHfref (Clock_Ip_NameType Name)
{
  uint32 CmuIsrValue;
  struct Clock_Ip_ClockMonitorType * const CmuFc;
  const struct Clock_Ip_CmuInfoType * CmuInformation;
  unsigned char _1;
  int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[Name_5(D)][8];
  _2 = (int) _1;
  CmuInformation_6 = &Clock_Ip_axCmuInfo[_2];
  # DEBUG CmuInformation => CmuInformation_6
  # DEBUG BEGIN_STMT
  CmuFc_7 = CmuInformation_6->CmuInstance;
  # DEBUG CmuFc => CmuFc_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 ={v} CmuFc_7->SR;
  CmuIsrValue_8 = _3 & 3;
  # DEBUG CmuIsrValue => CmuIsrValue_8
  # DEBUG BEGIN_STMT
  CmuFc_7->SR ={v} CmuIsrValue_8;
  return;

}


Clock_Ip_SetCmuFcFceRefCntLfrefHfref (const struct Clock_Ip_CmuConfigType * Config)
{
  uint32 ModuloValue;
  uint32 DividerResult;
  uint32 DivideBy;
  uint32 Cmp2;
  uint32 Cmp1;
  uint32 LfRef;
  uint32 HfRef;
  uint32 RefCount;
  uint32 BusClk;
  uint32 MonitoredClk;
  uint32 ReferenceClk;
  static uint32 Hash[6];
  struct Clock_Ip_ClockMonitorType * const CmuFc;
  const struct Clock_Ip_CmuInfoType * CmuInformation;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  <unnamed type> _4;
  unsigned char _5;
  int _6;
  long unsigned int _7;
  unsigned char _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  <unnamed type> _14;
  long unsigned int _15;
  unsigned char _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  <unnamed type> _22;
  <unnamed type> _23;
  unsigned char _24;
  int _25;
  long unsigned int _26;
  <unnamed type> _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  <unnamed type> _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;
  long unsigned int _42;
  long unsigned int _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _46;
  long unsigned int _47;
  long unsigned int _48;
  long unsigned int _49;
  long unsigned int _50;
  long unsigned int _51;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config_58(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][8];
  _3 = (int) _2;
  CmuInformation_59 = &Clock_Ip_axCmuInfo[_3];
  # DEBUG CmuInformation => CmuInformation_59
  # DEBUG BEGIN_STMT
  CmuFc_60 = CmuInformation_59->CmuInstance;
  # DEBUG CmuFc => CmuFc_60
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ReferenceClk_61 = 0;
  # DEBUG ReferenceClk => ReferenceClk_61
  # DEBUG BEGIN_STMT
  MonitoredClk_62 = 0;
  # DEBUG MonitoredClk => MonitoredClk_62
  # DEBUG BEGIN_STMT
  BusClk_63 = 0;
  # DEBUG BusClk => BusClk_63
  # DEBUG BEGIN_STMT
  RefCount_64 = 0;
  # DEBUG RefCount => RefCount_64
  # DEBUG BEGIN_STMT
  HfRef_65 = 0;
  # DEBUG HfRef => HfRef_65
  # DEBUG BEGIN_STMT
  LfRef_66 = 0;
  # DEBUG LfRef => LfRef_66
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = Config_58(D)->Name;
  _5 = Clock_Ip_au8ClockFeatures[_4][8];
  _6 = (int) _5;
  _7 = Hash[_6];
  _8 = Config_58(D)->Enable;
  _9 = (long unsigned int) _8;
  _10 = Config_58(D)->Interrupt;
  _11 = _9 ^ _10;
  _12 = Config_58(D)->MonitoredClockFrequency;
  _13 = _11 ^ _12;
  _14 = Config_58(D)->Name;
  _15 = _13 ^ _14;
  if (_7 != _15)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _16 = Config_58(D)->Enable;
  _17 = (long unsigned int) _16;
  _18 = Config_58(D)->Interrupt;
  _19 = _17 ^ _18;
  _20 = Config_58(D)->MonitoredClockFrequency;
  _21 = _19 ^ _20;
  _22 = Config_58(D)->Name;
  _23 = Config_58(D)->Name;
  _24 = Clock_Ip_au8ClockFeatures[_23][8];
  _25 = (int) _24;
  _26 = _21 ^ _22;
  Hash[_25] = _26;
  # DEBUG BEGIN_STMT
  _27 = CmuInformation_59->Reference;
  switch (_27) <default: <L4> [INV], case 0: <L1> [INV], case 2: <L3> [INV], case 4: <L2> [INV]>

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _28 = Clock_Ip_GetConfiguredFrequencyValue (0);
  ReferenceClk_73 = _28 / 1000;
  # DEBUG ReferenceClk => ReferenceClk_73
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  _29 = Clock_Ip_GetConfiguredFrequencyValue (4);
  ReferenceClk_69 = _29 / 1000;
  # DEBUG ReferenceClk => ReferenceClk_69
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  _30 = Clock_Ip_GetConfiguredFrequencyValue (2);
  ReferenceClk_71 = _30 / 1000;
  # DEBUG ReferenceClk => ReferenceClk_71
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  ReferenceClk_74 = 0;
  # DEBUG ReferenceClk => ReferenceClk_74
  # DEBUG BEGIN_STMT

  <bb 8> :
  # ReferenceClk_52 = PHI <ReferenceClk_73(4), ReferenceClk_69(5), ReferenceClk_71(6), ReferenceClk_74(7)>
  # DEBUG ReferenceClk => ReferenceClk_52
  # DEBUG BEGIN_STMT
  _31 = Config_58(D)->MonitoredClockFrequency;
  MonitoredClk_75 = _31 / 1000;
  # DEBUG MonitoredClk => MonitoredClk_75
  # DEBUG BEGIN_STMT
  _32 = CmuInformation_59->Bus;
  if (_32 == 15)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  _33 = Clock_Ip_GetConfiguredFrequencyValue (15);
  BusClk_77 = _33 / 1000;
  # DEBUG BusClk => BusClk_77
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 10> :
<L7>:
  # DEBUG BEGIN_STMT
  BusClk_78 = 0;
  # DEBUG BusClk => BusClk_78
  # DEBUG BEGIN_STMT

  <bb 11> :
  # BusClk_53 = PHI <BusClk_77(9), BusClk_78(10)>
  # DEBUG BusClk => BusClk_53
  # DEBUG BEGIN_STMT
  if (ReferenceClk_52 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 12> :
  if (BusClk_53 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  if (MonitoredClk_75 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _34 = ReferenceClk_52 * 3;
  _35 = _34 / BusClk_53;
  Cmp1_79 = _35 + 1;
  # DEBUG Cmp1 => Cmp1_79
  # DEBUG BEGIN_STMT
  _36 = ReferenceClk_52 * 5;
  _37 = _36 / MonitoredClk_75;
  Cmp2_80 = _37 + 9;
  # DEBUG Cmp2 => Cmp2_80
  # DEBUG BEGIN_STMT
  RefCount_81 = MAX_EXPR <Cmp2_80, Cmp1_79>;
  # DEBUG RefCount => RefCount_81
  # DEBUG BEGIN_STMT
  _38 = MonitoredClk_75 * RefCount_81;
  HfRef_82 = _38 * 1011;
  # DEBUG HfRef => HfRef_82
  # DEBUG BEGIN_STMT
  DivideBy_83 = ReferenceClk_52 * 967;
  # DEBUG DivideBy => DivideBy_83
  # DEBUG BEGIN_STMT
  DividerResult_84 = HfRef_82 / DivideBy_83;
  # DEBUG DividerResult => DividerResult_84
  # DEBUG BEGIN_STMT
  _39 = DivideBy_83 * DividerResult_84;
  ModuloValue_85 = HfRef_82 - _39;
  # DEBUG ModuloValue => ModuloValue_85
  # DEBUG BEGIN_STMT
  _40 = DividerResult_84 * 10;
  _41 = ModuloValue_85 * 10;
  _42 = _41 / DivideBy_83;
  _43 = _40 + _42;
  HfRef_86 = _43 + 4;
  # DEBUG HfRef => HfRef_86
  # DEBUG BEGIN_STMT
  _44 = MonitoredClk_75 * RefCount_81;
  LfRef_87 = _44 * 989;
  # DEBUG LfRef => LfRef_87
  # DEBUG BEGIN_STMT
  DivideBy_88 = ReferenceClk_52 * 1033;
  # DEBUG DivideBy => DivideBy_88
  # DEBUG BEGIN_STMT
  DividerResult_89 = LfRef_87 / DivideBy_88;
  # DEBUG DividerResult => DividerResult_89
  # DEBUG BEGIN_STMT
  _45 = DivideBy_88 * DividerResult_89;
  ModuloValue_90 = LfRef_87 - _45;
  # DEBUG ModuloValue => ModuloValue_90
  # DEBUG BEGIN_STMT
  _46 = DividerResult_89 * 10;
  _47 = ModuloValue_90 * 10;
  _48 = _47 / DivideBy_88;
  _49 = _46 + _48;
  LfRef_91 = _49 + 4294967293;
  # DEBUG LfRef => LfRef_91
  # DEBUG BEGIN_STMT
  _50 = RefCount_81 * 10;
  CmuFc_60->RCCR = _50;
  # DEBUG BEGIN_STMT
  CmuFc_60->HTCR = HfRef_86;
  # DEBUG BEGIN_STMT
  CmuFc_60->LTCR = LfRef_91;

  <bb 15> :
  # DEBUG BEGIN_STMT
  _51 = Config_58(D)->Interrupt;
  CmuFc_60->IER = _51;
  return;

}


Clock_Ip_ResetCmuFcFceRefCntLfrefHfref (const struct Clock_Ip_CmuConfigType * Config)
{
  <unnamed type> _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Config_3(D)->Name;
  Clock_Ip_DisableCmuFcFceRefCntLfrefHfref (_1);
  return;

}


Clock_Ip_DisableCmuFcFceRefCntLfrefHfref (Clock_Ip_NameType Name)
{
  uint32 FrequencyCheckStatus;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  struct Clock_Ip_ClockMonitorType * const CmuFc;
  const struct Clock_Ip_CmuInfoType * CmuInformation;
  unsigned char _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int TimeoutTicks.1_6;
  _Bool _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_au8ClockFeatures[Name_21(D)][8];
  _2 = (int) _1;
  CmuInformation_22 = &Clock_Ip_axCmuInfo[_2];
  # DEBUG CmuInformation => CmuInformation_22
  # DEBUG BEGIN_STMT
  CmuFc_23 = CmuInformation_22->CmuInstance;
  # DEBUG CmuFc => CmuFc_23
  # DEBUG BEGIN_STMT
  TimeoutOccurred_24 = 0;
  # DEBUG TimeoutOccurred => TimeoutOccurred_24
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01 ();
  # DEBUG BEGIN_STMT
  _3 = CmuFc_23->GCR;
  _4 = _3 & 1;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 ={v} CmuFc_23->SR;
  FrequencyCheckStatus_29 = _5 & 16;
  # DEBUG FrequencyCheckStatus => FrequencyCheckStatus_29
  # DEBUG BEGIN_STMT
  TimeoutTicks.1_6 = TimeoutTicks;
  TimeoutOccurred_31 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.1_6);
  # DEBUG TimeoutOccurred => TimeoutOccurred_31
  # DEBUG BEGIN_STMT
  if (FrequencyCheckStatus_29 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _7 = ~TimeoutOccurred_31;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_31 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Clock_Ip_ReportClockErrors (1, Name_21(D));
  goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _8 = CmuFc_23->GCR;
  _9 = _8 & 4294967294;
  CmuFc_23->GCR = _9;
  # DEBUG BEGIN_STMT
  _10 = CmuFc_23->IER;
  _11 = _10 & 4294967280;
  CmuFc_23->IER = _11;
  # DEBUG BEGIN_STMT
  _12 ={v} CmuFc_23->SR;
  _13 = _12 | 3;
  CmuFc_23->SR ={v} _13;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _14 = CmuFc_23->IER;
  _15 = _14 & 4294967280;
  CmuFc_23->IER = _15;
  # DEBUG BEGIN_STMT
  _16 ={v} CmuFc_23->SR;
  _17 = _16 | 3;
  CmuFc_23->SR ={v} _17;

  <bb 10> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01 ();
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


Clock_Ip_ClockMonitorEmpty_GetStatus (Clock_Ip_NameType Name)
{
  Clock_Ip_CmuStatusType _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = 3;
  return _1;

}


Clock_Ip_ClockMonitorEmpty_ClearStatus (Clock_Ip_NameType Name)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_ClockMonitorEmpty_Disable (Clock_Ip_NameType Name)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_ClockMonitorEmpty (const struct Clock_Ip_CmuConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


